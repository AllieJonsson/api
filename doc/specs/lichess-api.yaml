openapi: "3.1.0"
info:
  version: 2.0.0
  title: Lichess.org API reference
  contact:
    name: "Lichess.org API"
    url: "https://lichess.org/api"
    email: "contact@lichess.org"
  x-logo:
    url: https://lichess1.org/assets/logo/lichess-pad12.svg
  license:
    name: AGPL-3.0-or-later
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  description: |
    # Introduction
    Welcome to the reference for the Lichess API! Lichess is free/libre,
    open-source chess server powered by volunteers and donations.
    - Get help in the [Lichess Discord channel](https://discord.gg/lichess)
    - API demo app with OAuth2 login and gameplay: [source](https://github.com/lichess-org/api-demo) / [demo](https://lichess-org.github.io/api-demo/)
    - API UI app with OAuth2 login and endpoint forms: [source](https://github.com/lichess-org/api-ui) / [website](https://lichess.org/api/ui)
    - [Contribute to this documentation on Github](https://github.com/lichess-org/api)
    - Check out [Lichess widgets to embed in your website](https://lichess.org/developers)
    - [Download all Lichess rated games](https://database.lichess.org/)
    - [Download all Lichess puzzles with themes, ratings and votes](https://database.lichess.org/#puzzles)
    - [Download all evaluated positions](https://database.lichess.org/#evals)

    ## Endpoint
    All requests go to `https://lichess.org` (unless otherwise specified).

    ## Clients
    - [Python general API](https://github.com/lichess-org/berserk)
    - [MicroPython general API](https://github.com/mkomon/uberserk)
    - [Python general API - async](https://pypi.org/project/async-lichess-sdk)
    - [Python Lichess Bot](https://github.com/lichess-bot-devs/lichess-bot)
    - [Python Board API for Certabo](https://github.com/haklein/certabo-lichess)
    - [Java general API](https://github.com/tors42/chariot)
    - [JavaScript & TypeScript general API](https://github.com/devjiwonchoi/equine)

    ## Rate limiting
    All requests are rate limited using various strategies,
    to ensure the API remains responsive for everyone.
    Only make one request at a time.
    If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429),
    please wait a full minute before resuming API usage.

    ## Streaming with ND-JSON
    Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](https://github.com/ndjson/ndjson-spec), with one JSON object per line.

    Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.

    ## Authentication
    ### Which authentication method is right for me?
    [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md)

    ### Personal Access Token
    Personal API access tokens allow you to quickly interact with Lichess API without going through an OAuth flow.
    - [Generate a personal access token](https://lichess.org/account/oauth/token)
    - `curl https://lichess.org/api/account -H "Authorization: Bearer {token}"`
    - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)

    ### Authorization Code Flow with PKCE
    The authorization code flow with PKCE allows your users to **login with Lichess**.
    Lichess supports unregistered and public clients (no client authentication, choose any unique client id).
    The only accepted code challenge method is `S256`.
    Access tokens are long-lived (expect one year), unless they are revoked.
    Refresh tokens are not supported.

    See the [documentation for the OAuth endpoints](#tag/OAuth) or
    the [PKCE RFC](https://datatracker.ietf.org/doc/html/rfc7636#section-4) for a precise protocol description.

    - [Demo app](https://lichess-org.github.io/api-demo/)
    - [Minimal client-side example](https://github.com/lichess-org/api/tree/master/example/oauth-app)
    - [Flask/Python example](https://github.com/lakinwecker/lichess-oauth-flask)
    - [Java example](https://github.com/tors42/lichess-oauth-pkce-app)
    - [NodeJS Passport strategy to login with Lichess OAuth2](https://www.npmjs.com/package/passport-lichess)

    #### Real life examples
    - [PyChess](https://github.com/gbtami/pychess-variants) ([source code](https://github.com/gbtami/pychess-variants))
    - [Lichess4545](https://www.lichess4545.com/) ([source code](https://github.com/cyanfish/heltour))
    - [English Chess Federation](https://ecf.octoknight.com/)
    - [Rotherham Online Chess](https://rotherhamonlinechess.azurewebsites.net/tournaments)

    ### Token format
    Access tokens and authorization codes match `^[A-Za-z0-9_]+$`.
    The length of tokens can be increased without notice. Make sure your application can handle at least 512 characters.
    By convention tokens have a recognizable prefix, but do not rely on this.
servers:
  - url: https://lichess.org
tags:
- name: Account
  description: |
    Read and write account information and preferences.
    <https://lichess.org/account/preferences/game-display>
- name: Users
  description: |
    Access registered users on Lichess.
    <https://lichess.org/player>

    - Each user blog exposes an atom (RSS) feed, like <https://lichess.org/@/thibault/blog.atom>
    - User blogs mashup feed: https://lichess.org/blog/community.atom
    - User blogs mashup feed for a language: https://lichess.org/blog/community/fr.atom

- name: Relations
  description: |
    Access relations between users.
- name: Games
  description: |
    Access games played on Lichess.
    <https://lichess.org/games>
- name: TV
  description: |
    Access Lichess TV channels and games.
    <https://lichess.org/tv> & <https://lichess.org/games>
- name: Puzzles
  description: |
    Access Lichess [puzzle history and dashboard](https://lichess.org/training).

    Our collection of puzzles is in the public domain, you can [download it here](https://database.lichess.org/#puzzles).
    For a list of our puzzle themes with their description, check out the [theme translation file](https://github.com/ornicar/lila/blob/master/translation/source/puzzleTheme.xml).
    The daily puzzle can be [posted in your slack workspace](https://lichess.org/daily-puzzle-slack).
- name: Teams
  description: |
    Access and manage Lichess teams and their members.
    <https://lichess.org/team>
- name: Board
  description: "Play on Lichess with physical boards and third-party clients.\n
  \ Works with normal Lichess accounts. Engine play or assistance is [forbidden](https://lichess.org/page/fair-play).\n\n\
  \n### Features\n\
  \ - [Stream incoming chess moves](#operation/boardGameStream)\n\
  \ - [Play chess moves](#operation/boardGameMove)\n\
  \ - [Read](#operation/boardGameStream) and [write](#operation/boardGameChatPost) in the player and spectator chats\n\
  \ - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges\n\
  \ - [Abort](#operation/boardGameAbort) and [resign](#operation/boardGameResign) games\n\
  \ - Compatible with normal Lichess accounts\n\n
  \n### Restrictions\n\
  \ - Engine assistance, or any kind of outside help, is [forbidden](https://lichess.org/page/fair-play)\n\
  \ - Time controls: [Rapid, Classical and Correspondence](https://lichess.org/faq#time-controls) only.\n\
  \   For direct challenges and games vs AI, Blitz is also possible.\n\
  \n### Links\n\
  \ - [Announcement](https://lichess.org/blog/XlRW5REAAB8AUJJ-/welcome-lichess-boards)\n\
  \ - [Implementation example](https://github.com/lichess-org/api-demo) and [live demo](https://lichess-org.github.io/api-demo/)\n\n
  \ - [Certabo support](https://github.com/haklein/certabo-lichess)\n\
  \ - [Lichs (play from command-line)](https://github.com/Cqsi/lichs)\n\
  \ - [Lichess discord bot](https://top.gg/bot/707287095911120968)\n\
  \ - [cli-chess](https://github.com/trevorbayless/cli-chess/)"
- name: Bot
  description: "Play on Lichess as a bot. Allows engine play.\n
  \ Read the [blog post announcement of lichess bots](https://lichess.org/blog/WvDNticAAMu_mHKP/welcome-lichess-bots).\n\n
  \ Only works with [Bot accounts](#operation/botAccountUpgrade).\n\n\
  \n### Features\n\
  \ - [Stream incoming chess moves](#operation/botGameStream)\n\
  \ - [Play chess moves](#operation/botGameMove)\n\
  \ - [Read](#operation/botGameStream) and [write](#operation/botGameChat) in the player and spectator chats\n\
  \ - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges\n\
  \ - [Abort](#operation/botGameAbort) and [resign](#operation/botGameResign) games\n\
  \ - Engine assistance is [allowed](https://lichess.org/page/fair-play)\n\
  \n### Restrictions\n\
  \ - Bots can only play challenge games:  pools and tournaments are off-limits\n\
  \ - Bots cannot play UltraBullet (¼+0) because it requires making too many requests. But 0+1 and ½+0 are allowed.\n\
  \ - Bots must follow [Lichess TOS](https://lichess.org/terms-of-service) specifically Sandbagging, Constant Aborting, Boosting, etc\n\
  \ - Bot devs are advised to make their Bots play casual only when testing their Bots logic and to avoid breaking Lichess TOS.\n\
  \n### Integrations\n\
  \ - [Python3 lichess-bot](https://github.com/lichess-bot-devs/lichess-bot) (official)\n\
  \ - [Python3 lichess UCI bot](https://github.com/Torom/BotLi)\n\
  \ - [JavaScript bot-o-tron](https://github.com/tailuge/bot-o-tron)\n\
  \ - [Golang lichess-bot](https://github.com/dolegi/lichess-bot)\n\
  \ - [Electronic Chessboard](http://www.oliviermercier.com/res/projects/chessboard/)
  \ - Yours? Please make [an issue or pull request](https://github.com/lichess-org/api).\n\
  \n### Links\n\
  \ - [Announcement](https://lichess.org/blog/WvDNticAAMu_mHKP/welcome-lichess-bots)\n\
  \ - Join the [Lichess Bots team](https://lichess.org/team/lichess-bots) with your bot account\n\
  \ - [Get help in the discord channel](https://discord.gg/quwueFd)\n\
  \ - Watch [Lichess Bot TV](https://lichess.org/tv/bot)"
- name: Challenges
  description: |
    Send and receive challenges to play.

    To create a lot of challenges, consider [bulk pairing](#operation/bulkPairingCreate) instead.
- name: Bulk pairings
  description: |
    Create many games for other players.

    These endpoints are intended for tournament organisers.
- name: Arena tournaments
  description: |
    Access Arena tournaments played on Lichess.
    [Official Arena tournaments](https://lichess.org/tournament) are maintained by Lichess,
    but you can [create your own Arena tournaments](https://lichess.org/tournament/new) as well.
- name: Swiss tournaments
  description: |
    Access Swiss tournaments played on Lichess.
    [Read more about Swiss tournaments.](https://lichess.org/swiss).
- name: Simuls
  description: |
    Access simuls played on Lichess.
    <https://lichess.org/simul>
- name: Studies
  description: |
    Access Lichess studies.
    <https://lichess.org/study>
- name: Messaging
  description: |
    Private messages with other players.
    <https://lichess.org/inbox>
- name: Broadcasts
  description: |
    Relay chess events on Lichess.
    [Official broadcasts](https://lichess.org/broadcast) are maintained by Lichess,
    but you can [create your own broadcasts](https://lichess.org/broadcast/new) to cover any live game or chess event.
    You will need to publish PGN on a public URL so that Lichess can pull updates from it.
    Alternatively, you can push PGN updates to Lichess using [this API endpoint](#tag/Broadcasts/operation/broadcastPush).

    Broadcasts are organized in tournaments, which have several rounds, which have several games.
    You must first create a tournament, then you can add rounds to them.
- name: Analysis
  description: |
    Access Lichess cloud evaluations database.
    <https://lichess.org/analysis>
- name: External engine
  description: |
    **This API is in alpha and subject to change.**

    Use or provide external engine analysis.

    External engines can provide analysis on pages like the
    [analysis board](https://lichess.org/analysis), running as a service
    outside of the browser, or even on a different machine.
- name: Opening Explorer
  description: |
    Lookup positions from the [Lichess opening explorer](https://lichess.org/analysis#explorer).

    Runs <https://github.com/niklasf/lila-openingexplorer>.

    **The endpoint hostname is not lichess.org but explorer.lichess.ovh.**
- name: Tablebase
  description: |
    Lookup positions from the [Lichess tablebase server](https://lichess.org/blog/W3WeMyQAACQAdfAL/7-piece-syzygy-tablebases-are-complete).

    **The endpoint hostname is not lichess.org but tablebase.lichess.ovh.**
- name: OAuth
  description: |
    Obtaining and revoking OAuth tokens.

    [Read about the Lichess API authentication methods and code examples](https://github.com/lichess-org/api/blob/master/example/README.md).
paths:
  /api/users/status:
    get:
      operationId: apiUsersStatus
      summary: Get real-time users status
      description: |
        Read the `online`, `playing` and `streaming` flags of several users.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).

        Use it to track players and know when they're connected on lichess and playing games.
      tags:
        - Users
      security: []
      parameters:
        - in: query
          name: ids
          required: true
          description: User IDs separated by commas. Up to 100 IDs.
          schema:
            type: string
          example: aliquantus,chess-network,lovlas
        - in: query
          name: withGameIds
          required: false
          description: |
            Also return the ID of the game being played, if any, for each player, in a `playingId` field.
            Defaults to `false` to preserve server resources.
          schema:
            type: boolean
          example: true
      responses:
        "200":
          description: The list of users and their respective statuses.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                    online:
                      type: boolean
                    playing:
                      type: boolean
                    streaming:
                      type: boolean
                    patron:
                      type: boolean
                  required:
                    - id
                    - name
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "online": true,
                    "playing": true,
                    "streaming": true,
                    "patron": true
                  }
                ]

  /api/player:
    get:
      operationId: player
      summary: Get all top 10
      tags:
        - Users
      security: []
      description: |
        Get the top 10 players for each speed and variant.

        See <https://lichess.org/player>.
      responses:
        "200":
          description: The list of variants with their respective top players.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Top10s.yaml'

  /api/player/top/{nb}/{perfType}:
    get:
      operationId: playerTopNbPerfType
      summary: Get one leaderboard
      tags:
        - Users
      security: []
      description: |
        Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
        There is no leaderboard for correspondence or puzzles.

        See <https://lichess.org/player/top/200/bullet>.
      parameters:
        - in: path
          name: nb
          description: How many users to fetch
          schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 100
          required: true
        - in: path
          name: perfType
          description: The speed or variant
          schema:
            type: string
            example: bullet
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - chess960
              - crazyhouse
              - antichess
              - atomic
              - horde
              - kingOfTheHill
              - racingKings
              - threeCheck
          required: true
      responses:
        "200":
          description: The list of top players for the variant.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/vnd.lichess.v3+json:
              schema:
                $ref: './schemas/Leaderboard.yaml'

  /api/user/{username}:
    get:
      operationId: apiUser
      summary: Get user public data
      description: |
        Read public data of a user.

        If the request is [authenticated with OAuth2](#section/Introduction/Authentication),
        then extra fields might be present in the response: `followable`, `following`, `blocking`, `followsYou`.
      tags:
        - Users
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
        - in: query
          name: trophies
          description: Include user trophies
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The information of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/UserExtended.yaml'

  /api/user/{username}/rating-history:
    get:
      operationId: apiUserRatingHistory
      summary: Get rating history of a user
      description: |
        Read rating history of a user, for all perf types.
        There is at most one entry per day.
        Format of an entry is `[year, month, day, rating]`.
        `month` starts at zero (January).
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The rating history of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/RatingHistory.yaml'

  /api/user/{username}/perf/{perf}:
    get:
      operationId: apiUserPerf
      summary: Get performance statistics of a user
      description: |
        Read performance statistics of a user, for a single performance.
        Similar to the [performance pages on the website](https://lichess.org/@/thibault/perf/bullet).
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
        - in: path
          name: perf
          schema:
            $ref: './schemas/PerfType.yaml'
          required: true
      responses:
        "200":
          description: The performance statistics of the user
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/PerfStat.yaml'

  /api/user/{username}/activity:
    get:
      operationId: apiUserActivity
      summary: Get user activity
      description: |
        Read data to generate the activity feed of a user.
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The activity feed of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              example:
                https://gist.github.com/ornicar/0ee2d2427cb74ed1a35e86f5ba09fabc

  /api/puzzle/daily:
    get:
      operationId: apiPuzzleDaily
      summary: Get the daily puzzle
      description: |
        Get the daily Lichess puzzle in JSON format.

        Alternatively, you can [post it in your slack workspace](https://lichess.org/daily-puzzle-slack).
      tags:
        - Puzzles
      security: []
      responses:
        "200":
          description: The daily puzzle.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/PuzzleAndGame.yaml'

  /api/puzzle/{id}:
    get:
      operationId: apiPuzzleId
      summary: Get a puzzle by its ID
      description: Get a single Lichess puzzle in JSON format.
      tags:
        - Puzzles
      security: []
      parameters:
        - in: path
          name: id
          required: true
          description: The puzzle ID
          schema:
            type: string
      responses:
        "200":
          description: The requested puzzle.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/PuzzleAndGame.yaml'

  /api/puzzle/activity:
    get:
      operationId: apiPuzzleActivity
      summary: Get your puzzle activity
      description: |
        Download your puzzle activity in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Puzzle activity is sorted by reverse chronological order (most recent first)

        We recommend streaming the response, for it can be very long.
      tags:
        - Puzzles
      security:
        - OAuth2: ["puzzle:read"]
      parameters:
        - in: query
          name: max
          description: How many entries to download. Leave empty to download all activity.
          schema:
            type: integer
            minimum: 1
        - in: query
          name: before
          description: Download entries before this timestamp. Defaults to now. Use `before` and `max` for pagination.
          schema:
            type: integer
            minimum: 1356998400070
      responses:
        "200":
          description: The puzzle activity of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/PuzzleRoundJson.yaml'

  /api/puzzle/dashboard/{days}:
    get:
      operationId: apiPuzzleDashboard
      summary: Get your puzzle dashboard
      description: |
        Download your [puzzle dashboard](https://lichess.org/training/dashboard/30/dashboard) as JSON.

        Also includes all puzzle themes played, with aggregated results.

        Allows re-creating the [improvement/strengths](https://lichess.org/training/dashboard/30/improvementAreas) interfaces.
      tags:
        - Puzzles
      security:
        - OAuth2: ["puzzle:read"]
      parameters:
        - in: path
          name: days
          required: true
          description: How many days to look back when aggregating puzzle results. 30 is sensible.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: The puzzle dashboard of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/PuzzleDashboardJson.yaml'

  /api/storm/dashboard/{username}:
    get:
      operationId: apiStormDashboard
      summary: Get the storm dashboard of a player
      description: |
        Download the [storm dashboard](https://lichess.org/storm/dashboard/mrbasso) of any player as JSON.

        Contains the aggregated highscores, and the history of storm runs aggregated by days.

        Use `?days=0` if you only care about the highscores.
      tags:
        - Puzzles
      security: []
      parameters:
        - in: path
          name: username
          description: Username of the player
          schema:
            type: string
          required: true
        - in: query
          name: days
          description: How many days of history to return
          schema:
            type: integer
            minimum: 0
            maximum: 365
            default: 30
      responses:
        "200":
          description: The storm dashboard of a player.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/StormDashboardJson.yaml'

  /api/racer:
    post:
      operationId: racerPost
      summary: Create and join a puzzle race
      description: |
        Create a new private [puzzle race](https://lichess.org/racer).
        The Lichess user who creates the race must join the race page,
        and manually start the race when enough players have joined.

        - <https://lichess.org/racer>
      tags:
        - Puzzles
      security:
        - OAuth2: ["racer:write"]
      responses:
        "200":
          description: The new puzzle race.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/PuzzleRaceJson.yaml'

  /api/users:
    post:
      operationId: apiUsers
      summary: Get users by ID
      tags:
        - Users
      security: []
      description: |
        Get up to 300 users by their IDs. Users are returned in the same order as the IDs.

        The method is `POST` to allow a longer list of IDs to be sent in the request body.

        Please do not try to download all the Lichess users with this endpoint, or any other endpoint.
        An API is not a way to fully export a website. We do not provide a full download of the Lichess users.

        This endpoint is limited to 8,000 users every 10 minutes, and 120,000 every day.
      requestBody:
        description: User IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "aliquantus,chess-network,lovlas"
      responses:
        "200":
          description: The list of users.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/User.yaml'

  /api/account:
    get:
      operationId: accountMe
      summary: Get my profile
      description: |
        Public information about the logged in user.
      tags:
        - Account
      security:
        - OAuth2: []
      responses:
        "200":
          description: The public information about the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/UserExtended.yaml'

  /api/account/email:
    get:
      operationId: accountEmail
      summary: Get my email address
      description: |
        Read the email address of the logged in user.
      tags:
        - Account
      security:
        - OAuth2: ["email:read"]
      responses:
        "200":
          description: The email address of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                example:
                  email: abathur@mail.org

  /api/account/preferences:
    get:
      operationId: account
      summary: Get my preferences
      description: |
        Read the preferences of the logged in user.

        - <https://lichess.org/account/preferences/game-display>
        - <https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala>
      tags:
        - Account
      security:
        - OAuth2: ["preference:read"]
      responses:
        "200":
          description: The preferences of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  prefs:
                    $ref: './schemas/UserPreferences.yaml'
                  language:
                    type: string
                    example: en-GB

  /api/account/kid:
    get:
      operationId: accountKid
      summary: Get my kid mode status
      description: |
        Read the kid mode status of the logged in user.

        - <https://lichess.org/account/kid>
      tags:
        - Account
      security:
        - OAuth2: ["preference:read"]
      responses:
        "200":
          description: The kid mode status of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  kid:
                    type: boolean
                example:
                  kid: false
    post:
      operationId: accountKidPost
      summary: Set my kid mode status
      description: |
        Set the kid mode status of the logged in user.

        - <https://lichess.org/account/kid>
      tags:
        - Account
      security:
        - OAuth2: ["preference:write"]
      parameters:
        - in: query
          name: v
          required: true
          description: Kid mode status
          schema:
            type: boolean
          example: true
      responses:
        "200":
          description: The kid mode status was set successfully for the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/timeline:
    get:
      operationId: timeline
      summary: Get my timeline
      description: |
        Get the timeline events of the logged in user.
      tags:
        - Account
      security:
        - OAuth2: []
      parameters:
        - in: query
          name: since
          description: Show events since this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
        - in: query
          name: nb
          description: Max number of events to fetch.
          schema:
            type: integer
            default: 15
            minimum: 1
            maximum: 30
      responses:
        "200":
          description: The events in the timeline of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Timeline.yaml'

  /game/export/{gameId}:
    get:
      operationId: gamePgn
      summary: Export one game
      description: |
        Download one game in either PGN or JSON format.

        Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: gameId
          description: The game ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: true
        - in: query
          name: evals
          description: |
            Include analysis evaluations and comments, when available.

            Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`

            Or in an `analysis` JSON field, depending on the response type.
          schema:
            type: boolean
            default: true
        - in: query
          name: accuracy
          description: |
            Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: true
        - in: query
          name: division
          description: | 
            Plies which mark the beginning of the middlegame and endgame.
            Only available in JSON
          schema:
            type: boolean
            default: true
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

            Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
            Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
          schema:
            type: string
      responses:
        "200":
          description: The game representation.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/json:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/user/{username}/current-game:
    get:
      operationId: apiUserCurrentGame
      summary: Export ongoing game of a user
      description: |
        Download the ongoing game, or the last game played, of a user.
        Available in either PGN or JSON format.

        Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: true
        - in: query
          name: evals
          description: |
            Include analysis evaluations and comments, when available.

            Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`

            Or in an `analysis` JSON field, depending on the response type.
          schema:
            type: boolean
            default: true
        - in: query
          name: accuracy
          description: |
            Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: true
        - in: query
          name: division
          description: | 
            Plies which mark the beginning of the middlegame and endgame.
            Only available in JSON
          schema:
            type: boolean
            default: false
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

            Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
            Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
          schema:
            type: string
      responses:
        "200":
          description: The ongoing (or last) game of a user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/json:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/games/user/{username}:
    get:
      operationId: apiGamesUser
      summary: Export games of a user
      description: |
        Download all games of any user in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (most recent first).

        We recommend streaming the response, for it can be very long.
        <https://lichess.org/@/german11> for instance has more than 500,000 games.

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
          - Authenticated, downloading your own games: 60 games per second
      tags:
        - Games
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: username
          description: The user name.
          schema:
            type: string
          required: true
        - in: query
          name: since
          description: Download games played since this timestamp. Defaults to account creation date.
          schema:
            type: integer
            minimum: 1356998400070
        - in: query
          name: until
          description: Download games played until this timestamp. Defaults to now.
          schema:
            type: integer
            minimum: 1356998400070
        - in: query
          name: max
          description: How many games to download. Leave empty to download all games.
          schema:
            type: integer
            minimum: 1
        - in: query
          name: vs
          description: "[Filter] Only games played against this opponent"
          schema:
            type: string
        - in: query
          name: rated
          description: "[Filter] Only rated (`true`) or casual (`false`) games"
          schema:
            type: boolean
        - in: query
          name: perfType
          description: "[Filter] Only games in these speeds or variants.\n
          \nMultiple perf types can be specified, separated by a comma.\n
          \nExample: blitz,rapid,classical"
          schema:
            allOf:
              - $ref: './schemas/PerfType.yaml'
              - default: null
        - in: query
          name: color
          description: "[Filter] Only games played as this color."
          schema:
            type: string
            enum:
              - white
              - black
        - in: query
          name: analysed
          description: "[Filter] Only games with or without a computer analysis available"
          schema:
            type: boolean
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description:
            Include the full PGN within the JSON response, in a `pgn` field.

            The response type must be set to `application/x-ndjson` by the request `Accept` header.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluations and comments, when available.

            Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`

            Or in an `analysis` JSON field, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: accuracy
          description: |
            Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: division
          description: | 
            Plies which mark the beginning of the middlegame and endgame.
            Only available in JSON
          schema:
            type: boolean
            default: false
        - in: query
          name: ongoing
          description: Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
          schema:
            type: boolean
            default: false
        - in: query
          name: finished
          description: Include finished games. Set to `false` to only get ongoing games.
          schema:
            type: boolean
            default: true
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

            Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
          schema:
            type: boolean
            default: false
        - in: query
          name: lastFen
          description: |
            Include the FEN notation of the last position of the game.

            The response type must be set to `application/x-ndjson` by the request `Accept` header.
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
            Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
          schema:
            type: string
        - in: query
          name: sort
          description: "Sort order of the games."
          schema:
            type: string
            default: dateDesc
            enum:
              - dateAsc
              - dateDesc
      responses:
        "200":
          description: The games of the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/x-ndjson:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/games/export/_ids:
    post:
      operationId: gamesExportIds
      summary: Export games by IDs
      description: |
        Download games by IDs in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.

        Games are sorted by reverse chronological order (most recent first)

        The method is `POST` so a longer list of IDs can be sent in the request body.

        300 IDs can be submitted.

        Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.
      tags:
        - Games
      security: []
      requestBody:
        description: Game IDs separated by commas. Up to 300.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "TJxUmbWK,4OtIh2oh,ILwozzRZ"
      parameters:
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluations and comments, when available.

            Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`

            Or in an `analysis` JSON field, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: accuracy
          description: |
            Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: division
          description: | 
            Plies which mark the beginning of the middlegame and endgame.
            Only available in JSON
          schema:
            type: boolean
            default: false
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PGN about the opening, analysis variations, mistakes, and game termination.

            Example: `5... g4? { (-0.98 → 0.60) Mistake. Best move was h6. } (5... h6 6. d4 Ne7 7. g3 d5 8. exd5 fxg3 9. hxg3 c6 10. dxc6)`
          schema:
            type: boolean
            default: false
        - in: query
          name: players
          description: |
            URL of a text file containing real names and ratings, to replace Lichess usernames and ratings in the PGN.
            Example: <https://gist.githubusercontent.com/ornicar/6bfa91eb61a2dcae7bcd14cce1b2a4eb/raw/768b9f6cc8a8471d2555e47ba40fb0095e5fba37/gistfile1.txt>
          schema:
            type: string
      responses:
        "200":
          description: The representation of the games.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/x-ndjson:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/stream/games-by-users:
    post:
      operationId: gamesByUsers
      summary: Stream games of users
      description: |
        Stream the games played between a list of users, in real time.
        Only games where **both players** are part of the list are included.

        The stream emits an event each time a game is started or finished.

        To also get all current ongoing games at the beginning of the stream, use the `withCurrentGames` flag.

        Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        Maximum number of users: 300.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      tags:
        - Games
      security: []
      requestBody:
        description: |
          Up to 300 user IDs separated by commas.
          Example: `aliquantus,chess-network,lovlas`
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - in: query
          name: withCurrentGames
          description: Include the already started games at the beginning of the stream.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The stream of the games played between the users.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/GameStream.yaml'

  /api/stream/games/{streamId}:
    post:
      operationId: gamesByIds
      summary: Stream games by IDs
      description: |
        Creates a stream of games from an arbitrary streamId, and a list of game IDs.

        The stream first outputs the games that already exists, then emits an event each time a game is started or finished.

        Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        Maximum number of games: 500 for anonymous requests, or 1000 for [OAuth2 authenticated](#section/Introduction/Authentication) requests.

        While the stream is open, it is possible to [add new game IDs to watch](#operation/gamesByIdsAdd).
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: streamId
          schema:
            type: string
            description: Arbitrary stream ID that you can later use to add game IDs to the stream.
            example: "myAppName-someRandomId"
          required: true
      requestBody:
        description: |
          Up to 500 or 1000 game IDs separated by commas.
          Example: `gameId01,gameId02,gameId03`
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: The stream of the games matching the requested IDs.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/GameStream.yaml'

  /api/stream/games/{streamId}/add:
    post:
      operationId: gamesByIdsAdd
      summary: Add game IDs to stream
      description: |
        Add new game IDs for [an existing stream](#operation/gamesByIds) to watch.
        The stream will immediately outputs the games that already exists, then emit an event each time a game is started or finished.
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: streamId
          schema:
            type: string
            description: The stream ID you used to [create the stream](#operation/gamesByIds).
            example: "myAppName-someRandomId"
          required: true
      requestBody:
        description: |
          Up to 500 or 1000 game IDs separated by commas.
          Example: `gameId04,gameId05,gameId06`
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: The game IDs have been added to the stream.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/account/playing:
    get:
      operationId: apiAccountPlaying
      summary: Get my ongoing games
      description: |
        Get the ongoing games of the current user.
        Real-time and correspondence games are included.
        The most urgent games are listed first.
      tags:
        - Games
      security:
        - OAuth2: []
      parameters:
        - in: query
          name: nb
          description: Max number of games to fetch
          schema:
            type: integer
            default: 9
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: The ongoing games of the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {
                  "nowPlaying": [
                    {
                      "gameId": "rCRw1AuO",
                      "fullId": "rCRw1AuOvonq",
                      "color": "black",
                      "fen": "r1bqkbnr/pppp2pp/2n1pp2/8/8/3PP3/PPPB1PPP/RN1QKBNR w KQkq - 2 4",
                      "hasMoved": true,
                      "isMyTurn": false,
                      "lastMove": "b8c6",
                      "opponent": { "id": "philippe", "rating": 1790, "username": "Philippe" },
                      "perf": "correspondence",
                      "rated": false,
                      "secondsLeft": 1209600,
                      "source": "friend",
                      "speed": "correspondence",
                      "variant": { "key": "standard", "name": "Standard" }
                    }
                  ]
                }

  /api/stream/game/{id}:
    get:
      operationId: streamGame
      summary: Stream moves of a game
      description: |
        Stream positions and moves of any ongoing game, in [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        A description of the game is sent as a first message.
        Then a message is sent each time a move is played.
        Finally a description of the game is sent when it finishes, and the stream is closed.

        Ongoing games are delayed by a few seconds ranging from 3 to 60 depending on the time control, as to prevent cheat bots from using this API.

        No more than 8 game streams can be opened at the same time from the same IP address.
      tags:
        - Games
      security: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: "LuGQwhBb"
          required: true
      responses:
        "200":
          description: The stream of the game moves.
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/MoveStream.yaml'

  /api/import:
    post:
      operationId: gameImport
      summary: Import one game
      description: |
        Import a game from PGN. See <https://lichess.org/paste>.

        Rate limiting: 200 games per hour for OAuth requests, 100 games per hour for anonymous requests.

        To broadcast ongoing games, consider [pushing to a broadcast instead](#operation/broadcastPush).

        To analyse a position or a line, just construct an analysis board URL:
        [https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+](https://lichess.org/analysis/pgn/e4_e5_Nf3_Nc6_Bc4_Bc5_Bxf7+)
      tags:
        - Games
      security:
        - OAuth2: []
      requestBody:
        description: A single game to import
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                pgn:
                  type: string
                  description: The PGN. It can contain only one game. Most standard tags are supported.
      responses:
        "200":
          description: The game was successfully imported.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {"id": "R6iLjwz5", "url": "https://lichess.org/R6iLjwz5"}
  
  /api/games/export/imports:
    get:
      operationId: apiImportedGamesUser
      summary: Export your imported games
      description : Download all games imported by you. Games are exported in PGN format.
      tags: 
        - Games
      security: 
        - OAuth2: []
      responses: 
        "200":
          description: "Imported games in PGN format"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'

  /api/tv/channels:
    get:
      operationId: tvChannels
      summary: Get current TV games
      description: |
        Get basic info about the best games being played for each speed and variant,
        but also computer games and bot games.

        See [lichess.org/tv](https://lichess.org/tv).
      tags:
        - TV
      security: []
      responses:
        "200":
          description: The list of games being played for each speed and variant.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {
                  "bot": {
                    "user": { "id": "leelachess", "name": "LeelaChess", "title": "BOT" },
                    "rating": 2660,
                    "gameId": "Zznv9MIl",
                    "color": "black"
                  },
                  "blitz": {
                    "user": { "id": "lekkerkortook", "name": "LekkerKortOok" },
                    "rating": 2603,
                    "gameId": "hTJ4v7Mp",
                    "color": "black"
                  },
                  "racingKings": {
                    "user": { "id": "chesslo21", "name": "chesslo21" },
                    "rating": 2123,
                    "gameId": "lgCDl5Of",
                    "color": "white"
                  },
                  "ultraBullet": {
                    "user": { "id": "farmville", "name": "Farmville" },
                    "rating": 2338,
                    "gameId": "NEY6OQ32",
                    "color": "white"
                  },
                  "bullet": {
                    "user": { "id": "nurmibrah", "name": "nurmiBrah" },
                    "rating": 2499,
                    "gameId": "5LgyE516",
                    "color": "black"
                  },
                  "classical": {
                    "user": { "id": "holden_m_j_thomas", "name": "Holden_M_J_Thomas" },
                    "rating": 1806,
                    "gameId": "k3oLby6N",
                    "color": "white"
                  },
                  "threeCheck": {
                    "user": { "id": "pepellou", "name": "pepellou", "patron": true },
                    "rating": 1978,
                    "gameId": "Og5RCvmu",
                    "color": "black"
                  },
                  "antichess": {
                    "user": { "id": "maria-bakkar", "name": "maria-bakkar" },
                    "rating": 2103,
                    "gameId": "toCr41yx",
                    "color": "black"
                  },
                  "computer": {
                    "user": { "id": "oh_my_goat_im_so_bat", "name": "oh_my_goat_Im_so_bat" },
                    "rating": 2314,
                    "gameId": "TkI4qZxu",
                    "color": "black"
                  },
                  "horde": {
                    "user": { "id": "habitualchess", "name": "HabitualChess" },
                    "rating": 1803,
                    "gameId": "oMofN63H",
                    "color": "white"
                  },
                  "rapid": { "user": { "id": "denpayd", "name": "DenpaYD" }, "rating": 2289, "gameId": "IcWOl8ee" },
                  "atomic": {
                    "user": { "id": "meetyourdemise", "name": "MeetYourDemise" },
                    "rating": 2210,
                    "gameId": "tvMxtCMN",
                    "color": "white"
                  },
                  "crazyhouse": {
                    "user": { "id": "mathace", "name": "mathace" },
                    "rating": 2397,
                    "gameId": "i3gTZlUb",
                    "color": "black"
                  },
                  "chess960": {
                    "user": { "id": "voja_7", "name": "voja_7" },
                    "rating": 1782,
                    "gameId": "lrXLcedu",
                    "color": "white"
                  },
                  "kingOfTheHill": {
                    "user": { "id": "nadime", "name": "Nadime" },
                    "rating": 1500,
                    "gameId": "DsQn8aEV",
                    "color": "white"
                  },
                  "topRated": {
                    "user": { "id": "lekkerkortook", "name": "LekkerKortOok" },
                    "rating": 2603,
                    "gameId": "hTJ4v7Mp",
                    "color": "black"
                  }
                }

  /api/tv/feed:
    get:
      operationId: tvFeed
      summary: Stream current TV game
      description: |
        Stream positions and moves of the current [TV game](https://lichess.org/tv) in [ndjson](#section/Introduction/Streaming-with-ND-JSON).
        A summary of the game is sent as a first message, and when the featured game changes.

        Try it with `curl https://lichess.org/api/tv/feed`.
      tags:
        - TV
      security: []
      responses:
        "200":
          description: The stream of the current TV game.
          content:
            application/x-ndjson:
              schema:
                example: {
                  "t": "featured",
                  "d": {
                    "id": "qVSOPtMc",
                    "orientation": "black",
                    "players": [
                      {
                        "color": "white",
                        "user": { "name": "lizen9", "id": "lizen9", "title": "GM" },
                        "rating": 2531
                      },
                      {
                        "color": "black",
                        "user": { "name": "lizen29", "title": "WGM", "id": "lizen29" },
                        "rating": 2594
                      }
                    ],
                    "fen": "rnbqk1r1/ppp1ppbp/8/N2p2p1/8/1PQPP3/P1P2PPn/R1B1K1NR"
                  }
                }

  /api/tv/{channel}:
    get:
      operationId: tvChannelGames
      summary: Get best ongoing games of a TV channel
      description: |
        Get a list of ongoing games for a given TV channel. Similar to [lichess.org/games](https://lichess.org/games).

        Available in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request `Accept` header.
      tags:
        - TV
      security: []
      parameters:
        - in: path
          name: channel
          description: The name of the channel in camel case.
          schema:
            type: string
          required: true
        - in: query
          name: nb
          description: Number of games to fetch.
          schema:
            type: number
            default: 10
            minimum: 1
            maximum: 30
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The representation of the games.
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/x-ndjson:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/tournament:
    get:
      operationId: apiTournament
      summary: Get current tournaments
      description: |
        Get recently finished, ongoing, and upcoming tournaments.

        This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
      tags:
        - "Arena tournaments"
      security: []
      responses:
        "200":
          description: The list of current tournaments.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ArenaTournaments.yaml'
    post:
      operationId: apiTournamentPost
      summary: Create a new Arena tournament
      description: |
        Create a public or private Arena tournament.

        This endpoint mirrors the form on <https://lichess.org/tournament/new>.

        You can create up to 12 public tournaments per day, or 24 private tournaments.

        A team battle can be created by specifying the `teamBattleByTeam` argument.

        Additional restrictions:
          - clockTime + clockIncrement > 0
          - 15s and 0+1 variant tournaments cannot be rated
          - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                  minLength: 2
                  maxLength: 30
                clockTime:
                  type: number
                  description: Clock initial time in minutes
                  example: 2
                  enum:
                    - 0
                    - 0.25
                    - 0.5
                    - 0.75
                    - 1
                    - 1.5
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                clockIncrement:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  enum: [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 25, 30, 40, 50, 60]
                minutes:
                  type: integer
                  description: How long the tournament lasts, in minutes
                  example: 60
                  enum: [20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 150, 180, 210, 240, 270, 300, 330, 360, 420, 480, 540, 600, 720]
                waitMinutes:
                  type: integer
                  description: How long to wait before starting the tournament, from now, in minutes
                  default: 5
                  enum: [1, 2, 3, 5, 10, 15, 20, 30, 45, 60]
                startDate:
                  type: integer
                  description: Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                variant:
                  $ref: './schemas/VariantKey.yaml'
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                position:
                   $ref: './schemas/FromPositionFEN.yaml'
                berserkable:
                  type: boolean
                  description: Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2
                  default: true
                streakable:
                  type: boolean
                  description: After 2 wins, consecutive wins grant 4 points instead of 2.
                  default: true
                # "conditions.titled":
                #   type: boolean
                #   description: Whether to require a title to enter the tournament
                #   default: false
                hasChat:
                  type: boolean
                  description: Whether the players can discuss in a chat
                  default: true
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                password:
                  type: string
                  description: |
                    Make the tournament private, and restrict access with a password.
                    You can also [generate user-specific entry codes](https://github.com/lichess-org/api/tree/master/example/tournament-entry-code)
                    based on this password.
                teamBattleByTeam:
                  type: string
                  description: |
                    Set the ID of a team you lead to create a team battle.
                    The other teams can be added using the [team battle edit endpoint](#operation/apiTournamentTeamBattlePost).
                conditions.teamMember.teamId:
                  type: string
                  description: |
                    Restrict entry to members of a team.

                    The teamId is the last part of a team URL, e.g. `https://lichess.org/team/coders` has teamId = `coders`.

                    Leave empty to let everyone join the tournament.

                    Do not use this to create team battles, use `teamBattleByTeam` instead.
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                  enum: [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600]
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                  enum: [2200, 2100, 2000, 1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900, 800]
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
                  enum: [0, 5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200]
                conditions.allowList:
                  type: string
                  description: |
                    Predefined list of usernames that are allowed to join, separated by commas.
                    If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    Adding `%titled` to the list additionally allows any titled player to join.
                    Example: `thibault,german11,%titled`
              required:
                - clockTime
                - clockIncrement
                - minutes
      responses:
        "200":
          description: The Arena tournament has been successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ArenaTournamentVariantIsKey.yaml'
        "400":
          description: The creation of the Arena tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/tournament/{id}:
    parameters:
     - in: path
       name: id
       description: The tournament ID.
       schema:
         type: string
       required: true
    get:
      operationId: tournament
      summary: Get info about an Arena tournament
      description: |
        Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: query
          name: page
          description: Specify which page of player standings to view.
          schema:
            type: number
            example: 1
            default: 1
            minimum: 1
            maximum: 200
      responses:
        "200":
          description: The information of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ArenaTournamentVariantIsKey.yaml'
    post:
      operationId: apiTournamentUpdate
      summary: Update an Arena tournament
      description: |
        Update an Arena tournament.

        Be mindful not to make important changes to ongoing tournaments.

        Can be used to update a team battle.

        Additional restrictions:
          - clockTime + clockIncrement > 0
          - 15s and 0+1 variant tournaments cannot be rated
          - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                  minLength: 2
                  maxLength: 30
                clockTime:
                  type: number
                  description: Clock initial time in minutes
                  example: 2
                  enum:
                    - 0
                    - 0.25
                    - 0.5
                    - 0.75
                    - 1
                    - 1.5
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                clockIncrement:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  enum: [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 25, 30, 40, 50, 60]
                minutes:
                  type: integer
                  description: How long the tournament lasts, in minutes
                  example: 60
                  enum: [20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 150, 180, 210, 240, 270, 300, 330, 360, 420, 480, 540, 600, 720]
                waitMinutes:
                  type: integer
                  description: How long to wait before starting the tournament, from now, in minutes
                  default: 5
                  enum: [1, 2, 3, 5, 10, 15, 20, 30, 45, 60]
                startDate:
                  type: integer
                  description: Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                variant:
                  $ref: './schemas/VariantKey.yaml'
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                position:
                  $ref: './schemas/FromPositionFEN.yaml'
                berserkable:
                  type: boolean
                  description: Whether the players can use berserk. Only allowed if clockIncrement <= clockTime * 2
                  default: true
                streakable:
                  type: boolean
                  description: After 2 wins, consecutive wins grant 4 points instead of 2.
                  default: true
                hasChat:
                  type: boolean
                  description: Whether the players can discuss in a chat
                  default: true
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                password:
                  type: string
                  description: Make the tournament private, and restrict access with a password
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                  enum: [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600]
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                  enum: [2200, 2100, 2000, 1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900, 800]
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
                  enum: [0, 5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200]
                conditions.allowList:
                  type: string
                  description: |
                    Predefined list of usernames that are allowed to join, separated by commas.
                    If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    Adding `%titled` to the list additionally allows any titled player to join.
                    Example: `thibault,german11,%titled`
              required:
                - clockTime
                - clockIncrement
                - minutes
      responses:
        "200":
          description: The Arena tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ArenaTournamentVariantIsKey.yaml'
        "400":
          description: The update of the Arena tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/tournament/{id}/join:
    post:
      operationId: apiTournamentJoin
      summary: Join an Arena tournament
      description: |
        Join an Arena tournament, possibly with a password and/or a team.
        Also unpauses if you had previously [paused](#operation/apiTournamentWithdraw) the tournament.
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      requestBody:
        description: You may need these depending on the tournament to join
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: |
                    The tournament password, if one is required.
                    Can also be a [user-specific entry code](https://github.com/lichess-org/api/tree/master/example/tournament-entry-code)
                    generated and shared by the organizer.
                team:
                  type: string
                  description: The team to join the tournament with, for team battle tournaments
                pairMeAsap:
                  type: boolean
                  default: false
                  description: |
                    If the tournament is started, attempt to pair the user,
                    even if they are not connected to the tournament page.
                    This expires after one minute, to avoid pairing a user who is long gone.
                    You may call "join" again to extend the waiting.
      responses:
        "200":
          description: The tournament was successfully joined.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: Joining the tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/tournament/{id}/withdraw:
    post:
      operationId: apiTournamentWithdraw
      summary: Pause or leave an Arena tournament
      description: |
        Leave a future Arena tournament, or take a break on an ongoing Arena tournament.
        It's possible to join again later. Points and streaks are preserved.
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      responses:
        "200":
          description: The tournament was successfully paused or left.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: Pausing/leaving the tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/tournament/{id}/terminate:
    post:
      operationId: apiTournamentTerminate
      summary: Terminate an Arena tournament
      description: |
        Terminate an Arena tournament
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      responses:
        "200":
          description: The tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: Terminating the tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/tournament/team-battle/{id}:
      post:
        operationId: apiTournamentTeamBattlePost
        summary: Update a team battle
        description: |
          Set the teams and number of leaders of a team battle.

          To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
        tags:
          - "Arena tournaments"
        security:
          - OAuth2: ["tournament:write"]
        parameters:
          - in: path
            name: id
            description: The tournament ID (8 characters)..
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  teams:
                    type: string
                    description: |
                      All team IDs of the team battle, separated by commas.
                      Make sure to always send the full list.
                      Teams that are not in the list will be removed from the team battle.

                      Example: `coders,zhigalko_sergei-fan-club,hhSwTKZv`
                  nbLeaders:
                    type: integer
                    description: Number team leaders per team.
                required:
                  - teams
                  - nbLeaders
        responses:
          "200":
            description: The team battle tournament was successfully updated.
            headers:
              Access-Control-Allow-Origin:
                schema:
                  type: string
                  default: "'*'"
            content:
              application/json:
                schema:
                  $ref: './schemas/ArenaTournamentVariantIsKey.yaml'
          "400":
            description: The update of the team battle tournament failed.
            content:
              application/json:
                schema:
                  $ref: './schemas/Error.yaml'

  /api/tournament/{id}/games:
    get:
      operationId: gamesByTournament
      summary: Export games of an Arena tournament
      description: |
        Download games of a tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (most recent first).

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: player
          description: Only games of a particular player. Leave empty to fetch games of all players.
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluations and comments, when available.

            Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`

            Or in an `analysis` JSON field, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: accuracy
          description: |
            Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: division
          description: | 
            Plies which mark the beginning of the middlegame and endgame.
            Only available in JSON
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The list of games of an Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/x-ndjson:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/tournament/{id}/results:
    get:
      operationId: resultsByTournament
      summary: Get results of an Arena tournament
      description: |
        Players of an Arena tournament, with their score and performance, sorted by rank (best first).

        **Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON)**, i.e. one JSON object per line.

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: nb
          description: Max number of players to fetch
          schema:
            type: integer
            minimum: 1
        - in: query
          name: sheet
          description: |
            Add a `sheet` field to the player document.
            It's an expensive server computation that slows down the stream.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The results of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                example: {
                  "rank": 4,
                  "score": 389,
                  "rating": 2618,
                  "username": "opperwezen",
                  "title": "IM",
                  "performance": 2423,
                  "team": "coders"
                }

  /api/tournament/{id}/teams:
    get:
      operationId: teamsByTournament
      summary: Get team standing of a team battle
      description: |
        Teams of a team battle tournament, with top players, sorted by rank (best first).
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The list of teams of a team battle tournament, with their respective top players.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                example: {
                  "id": "CdPg1ey4",
                  "teams": [
                    {
                      "rank": 1,
                      "id": "cat-lovers",
                      "score": 842,
                      "players": [
                        { "user": { "name": "lizen69", "id": "lizen69" }, "score": 54 },
                        { "user": { "name": "lizen249", "id": "lizen249" } }
                      ]
                    }
                  ]
                }

  /api/user/{username}/tournament/created:
    get:
      operationId: apiUserNameTournamentCreated
      summary: Get tournaments created by a user
      description: |
        Get all tournaments created by a given user.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: username
          description: The user whose created tournaments to fetch
          schema:
            type: string
          required: true
        - in: query
          name: status
          description: |
            Include tournaments in the given status: "Created" (10), "Started" (20), "Finished" (30)

            You can add this parameter more than once to include tournaments in different statuses.

            Example: `?status=10&status=20`
          schema:
            type: integer
            enum: [10, 20, 30]
          required: false
      responses:
        "200":
          description: The list of tournaments created by the user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/ArenaTournament.yaml'

  /api/swiss/new/{teamId}:
    post:
      operationId: apiSwissNew
      summary: Create a new Swiss tournament
      description: |
        Create a Swiss tournament for your team.

        This endpoint mirrors the Swiss tournament form from your team pagee.

        You can create up to 12 tournaments per day.

        Additional restrictions:
          - clock.limit + clock.increment > 0
          - 15s and 0+1 variant tournaments cannot be rated
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: teamId
          description: ID of the team
          schema:
            type: string
          required: true
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                  minLength: 2
                  maxLength: 30
                clock.limit:
                  type: number
                  description: Clock initial time in seconds
                  example: 300
                  enum:
                    - 0
                    - 15
                    - 30
                    - 45
                    - 60
                    - 90
                    - 120
                    - 180
                    - 240
                    - 300
                    - 360
                    - 420
                    - 480
                    - 600
                    - 900
                    - 1200
                    - 1500
                    - 1800
                    - 2400
                    - 3000
                    - 3600
                    - 4200
                    - 4800
                    - 5400
                    - 6000
                    - 6600
                    - 7200
                    - 7800
                    - 8400
                    - 9000
                    - 9600
                    - 10200
                    - 10800
                clock.increment:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  minimum: 0
                  maximum: 120
                nbRounds:
                  type: integer
                  description: Maximum number of rounds to play
                  minimum: 3
                  maximum: 100
                startsAt:
                  type: integer
                  description: Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                roundInterval:
                  type: integer
                  description: |
                    How long to wait between each round, in seconds.

                    Set to 99999999 to manually schedule each round from the tournament UI.

                    If empty or -1, a sensible value is picked automatically.
                  enum:
                    - -1
                    - 5
                    - 10
                    - 20
                    - 30
                    - 45
                    - 60
                    - 120
                    - 180
                    - 300
                    - 600
                    - 900
                    - 1200
                    - 1800
                    - 2700
                    - 3600
                    - 86400
                    - 172800
                    - 604800
                    - 99999999
                variant:
                  $ref: './schemas/VariantKey.yaml'
                position:
                  $ref: './schemas/FromPositionFEN.yaml'
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                password:
                  type: string
                  description: Make the tournament private and restrict access with a password.
                forbiddenPairings:
                  type: string
                  description: |
                    Usernames of players that must not play together.

                    Two usernames per line, separated by a space.
                manualPairings:
                  type: string
                  description: |
                    Manual pairings for the next round.

                    Two usernames per line, separated by a space. Example:
                    ```
                    PlayerA PlayerB
                    PlayerC PlayerD
                    ```

                    To give a bye (1 point) to a player instead of a pairing, add a line like so:
                    ```
                    PlayerE 1
                    ```

                    Missing players will be considered absent and get zero points.
                chatFor:
                  type: number
                  description: |
                    Who can read and write in the chat.
                    - 0  = No-one
                    - 10 = Only team leaders
                    - 20 = Only team members
                    - 30 = All Lichess players
                  default: 20
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                  enum: [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600]
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                  enum: [2200, 2100, 2000, 1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900, 800]
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
                  minimum: 0
                  maximum: 200
                conditions.playYourGames:
                  type: boolean
                  description: |
                    Only let players join if they have played their last swiss game.
                    If they failed to show up in a recent swiss event, they won't be able to enter yours.
                    This results in a better swiss experience for the players who actually show up.
                  default: false
                conditions.allowList:
                  type: string
                  description: |
                    Predefined list of usernames that are allowed to join, separated by commas.
                    If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    Adding `%titled` to the list additionally allows any titled player to join.
                    Example: `thibault,german11,%titled`
              required:
                - clock.limit
                - clock.increment
                - nbRounds
      responses:
        "200":
          description: The Swiss tournament was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/SwissTournament.yaml'
        "400":
          description: The creation of the Swiss tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/swiss/{id}:
    parameters:
     - in: path
       name: id
       description: The Swiss tournament ID.
       schema:
         type: string
       required: true
    get:
      operationId: swiss
      summary: Get info about a Swiss tournament
      description: |
        Get detailed info about a Swiss tournament.
      tags:
        - "Swiss tournaments"
      security: []
      responses:
        "200":
          description: The information of the Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/SwissTournament.yaml'

  /api/swiss/{id}/edit:
    post:
      operationId: apiSwissUpdate
      summary: Update a Swiss tournament
      description: |
        Update a Swiss tournament.

        Be mindful not to make important changes to ongoing tournaments.

        Additional restrictions:
          - clock.limit + clock.increment > 0
          - 15s and 0+1 variant tournaments cannot be rated
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                  minLength: 2
                  maxLength: 30
                clock.limit:
                  type: number
                  description: Clock initial time in seconds
                  example: 300
                  enum:
                    - 0
                    - 15
                    - 30
                    - 45
                    - 60
                    - 90
                    - 120
                    - 180
                    - 240
                    - 300
                    - 360
                    - 420
                    - 480
                    - 600
                    - 900
                    - 1200
                    - 1500
                    - 1800
                    - 2400
                    - 3000
                    - 3600
                    - 4200
                    - 4800
                    - 5400
                    - 6000
                    - 6600
                    - 7200
                    - 7800
                    - 8400
                    - 9000
                    - 9600
                    - 10200
                    - 10800
                clock.increment:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  minimum: 0
                  maximum: 120
                nbRounds:
                  type: integer
                  description: Maximum number of rounds to play
                  minimum: 3
                  maximum: 100
                startsAt:
                  type: integer
                  description: Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.
                roundInterval:
                  type: integer
                  description: |
                    How long to wait between each round, in seconds.

                    Set to 99999999 to manually schedule each round from the tournament UI, or [with the API](#tag/Swiss-tournaments/operation/apiSwissScheduleNextRound).

                    If empty or -1, a sensible value is picked automatically.
                  enum:
                    - -1
                    - 5
                    - 10
                    - 20
                    - 30
                    - 45
                    - 60
                    - 120
                    - 180
                    - 300
                    - 600
                    - 900
                    - 1200
                    - 1800
                    - 2700
                    - 3600
                    - 86400
                    - 172800
                    - 604800
                    - 99999999
                variant:
                  $ref: './schemas/VariantKey.yaml'
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                password:
                  type: string
                  description: Make the tournament private and restrict access with a password.
                forbiddenPairings:
                  type: string
                  description: |
                    Usernames of players that must not play together.

                    Two usernames per line, separated by a space.
                manualPairings:
                  type: string
                  description: |
                    Manual pairings for the next round.

                    Two usernames per line, separated by a space.
                    Present players without a valid pairing will be given a bye, which is worth 1 point.
                    Forfeited players will get 0 points.
                chatFor:
                  type: number
                  description: |
                    Who can read and write in the chat.
                    - 0  = No-one
                    - 10 = Only team leaders
                    - 20 = Only team members
                    - 30 = All Lichess players
                  default: 20
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                  enum: [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600]
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                  enum: [2200, 2100, 2000, 1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000, 900, 800]
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
                  minimum: 0
                  maximum: 200
                conditions.playYourGames:
                  type: boolean
                  description: |
                    Only let players join if they have played their last swiss game.
                    If they failed to show up in a recent swiss event, they won't be able to enter yours.
                    This results in a better swiss experience for the players who actually show up.
                  default: false
                conditions.allowList:
                  type: string
                  description: |
                    Predefined list of usernames that are allowed to join, separated by commas.
                    If this list is non-empty, then usernames absent from this list will be forbidden to join.
                    Adding `%titled` to the list additionally allows any titled player to join.
                    Example: `thibault,german11,%titled`
              required:
                - clock.limit
                - clock.increment
                - nbRounds
      responses:
        "200":
          description: The Swiss tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/SwissTournament.yaml'
        "400":
          description: Updating the swiss failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'
        "401":
          description: This user cannot update this Swiss.
          content:
            application/json:
              schema:
                $ref: './schemas/SwissUnauthorisedEdit.yaml'

  /api/swiss/{id}/schedule-next-round:
    post:
      operationId: apiSwissScheduleNextRound
      summary: Manually schedule the next round
      description: |
        Manually schedule the next round date and time of a Swiss tournament.

        This sets the `roundInterval` field to `99999999`, i.e. manual scheduling.

        All further rounds will need to be manually scheduled, unless the `roundInterval` field is changed back to automatic scheduling.
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                date:
                  type: integer
                  description: Timestamp in milliseconds to start the next round at a given date and time.
      responses:
        "204":
          description: The Swiss tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
        "400":
          description: Updating the swiss failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'
        "401":
          description: This user cannot update this Swiss.
          content:
            application/json:
              schema:
                $ref: './schemas/SwissUnauthorisedEdit.yaml'

  /api/swiss/{id}/join:
    post:
      operationId: apiSwissJoin
      summary: Join a Swiss tournament
      description: |
        Join a Swiss tournament, possibly with a password.
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      requestBody:
        description: You may need these depending on the tournament to join
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The tournament password, if one is required
      responses:
        "200":
          description: The tournament was successfully joined.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: Joining the tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/swiss/{id}/withdraw:
    post:
      operationId: apiSwissWithdraw
      summary: Pause or leave a swiss tournament
      description: |
        Leave a future Swiss tournament, or take a break on an ongoing Swiss tournament.
        It's possible to join again later. Points are preserved.
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      responses:
        "200":
          description: The tournament was successfully paused or left.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/swiss/{id}/terminate:
    post:
      operationId: apiSwissTerminate
      summary: Terminate a Swiss tournament
      description: |
        Terminate a Swiss tournament
      tags:
        - "Swiss tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The Swiss tournament ID.
          schema:
            type: string
            example: "W5FrxusN"
          required: true
      responses:
        "200":
          description: The Swiss tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: Terminating the Swiss tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /swiss/{id}.trf:
    get:
      operationId: swissTrf
      summary: Export TRF of a Swiss tournament
      description: |
        Download a tournament in the Tournament Report File format, the FIDE standard.

        Documentation: <https://www.fide.com/FIDE/handbook/C04Annex2_TRF16.pdf>

        Example: <https://lichess.org/swiss/j8rtJ5GL.trf>
      tags:
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The TRF representation of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            text/plain:
              schema:
                type: string

  /api/swiss/{id}/games:
    get:
      operationId: gamesBySwiss
      summary: Export games of a Swiss tournament
      description: |
        Download games of a swiss tournament in PGN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (last round first).

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 20 games per second
          - [OAuth2 authenticated](#section/Introduction/Authentication) request: 30 games per second
      tags:
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: player
          description: Only the games played by a given player
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: pgnInJson
          description: Include the full PGN within the JSON response, in a `pgn` field.
          schema:
            type: boolean
            default: false
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock status when available.

            Either as PGN comments: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`

            Or in a `clocks` JSON field, as centisecond integers, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluations and comments, when available.

            Either as PGN comments: `12. Bxf6 { [%eval 0.23] } a3 { [%eval -1.09] }`

            Or in an `analysis` JSON field, depending on the response type.
          schema:
            type: boolean
            default: false
        - in: query
          name: accuracy
          description: |
            Include [accuracy percent](https://lichess.org/page/accuracy) of each player, when available.
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "King's Gambit Accepted, King's Knight Gambit"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: division
          description: | 
            Plies which mark the beginning of the middlegame and endgame.
            Only available in JSON
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The list of games of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/GamePgn.yaml'
            application/x-ndjson:
              schema:
                $ref: './schemas/GameJson.yaml'

  /api/swiss/{id}/results:
    get:
      operationId: resultsBySwiss
      summary: Get results of a swiss tournament
      description: |
        Players of a swiss tournament, with their score and performance, sorted by rank (best first).

        Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      tags:
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: nb
          description: Max number of players to fetch
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: The results of a Swiss tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                example: {
                  "rank": 4,
                  "points": 8.5,
                  "tieBreak": 77,
                  "rating": 2618,
                  "username": "opperwezen",
                  "title": "IM",
                  "performance": 2423
                }

  /api/team/{teamId}/swiss:
    get:
      operationId: apiTeamSwiss
      summary: Get team swiss tournaments
      description: |
        Get all swiss tournaments of a team.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Teams
        - "Swiss tournaments"
      security: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
          example: coders
        - in: query
          name: max
          description: How many tournaments to download.
          schema:
            type: integer
            minimum: 1
            default: 100
      responses:
        "200":
          description: The list of Swiss tournaments of a team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/nd-json:
              schema:
                $ref: './schemas/SwissTournament.yaml'

  /api/study/{studyId}/{chapterId}.pgn:
    get:
      operationId: studyChapterPgn
      summary: Export one study chapter
      description: |
        Download one study chapter in PGN format.
      tags:
        - Studies
      security: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
        - in: path
          name: chapterId
          description: The chapter ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: comments
          description: |
            Include analysis and annotator comments in the PGN moves, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
          schema:
            type: boolean
            default: true
        - in: query
          name: variations
          description: |
            Include non-mainline moves, when available.

            Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
          schema:
            type: boolean
            default: true
        - in: query
          name: source
          description: |
            Add a `Source` PGN tag with the study chapter URL.

            Example: `[Source "https://lichess.org/study/4NBHImfM/1Tk4IyTz"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: orientation
          description: |
            Add a `Orientation` PGN tag with the chapter predefined orientation.

            Example: `[Orientation "white"]`
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The chapter of the study.
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/StudyPgn.yaml'

  /api/study/{studyId}.pgn:
    get:
      operationId: studyAllChaptersPgn
      summary: Export all chapters
      description: |
        Download all chapters of a study in PGN format.
      tags:
        - Studies
      security: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: comments
          description: |
            Include analysis and annotator comments in the PGN moves, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
          schema:
            type: boolean
            default: true
        - in: query
          name: variations
          description: |
            Include non-mainline moves, when available.

            Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
          schema:
            type: boolean
            default: true
        - in: query
          name: source
          description: |
            Add a `Source` PGN tag with the study chapter URL.

            Example: `[Source "https://lichess.org/study/4NBHImfM/1Tk4IyTz"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: orientation
          description: |
            Add a `Orientation` PGN tag with the chapter predefined orientation.

            Example: `[Orientation "white"]`
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The PGN representation of the study.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
            Last-Modified:
              schema:
                type: string
                example: 'Tue, 25 Apr 2023 13:23:09 GMT'
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/StudyPgn.yaml'
    head:
      operationId: studyAllChaptersHead
      summary: Study metadata
      description: |
        Only get the study headers, including `Last-Modified`.
      tags:
        - Studies
      security: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The study headers.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
            Last-Modified:
              schema:
                type: string
                example: 'Tue, 25 Apr 2023 13:23:09 GMT'

  /api/study/{studyId}/import-pgn:
    post:
      operationId: apiStudyImportPGN
      summary: Import PGN into a study
      description: |
        Imports arbitrary PGN into an existing [study](https://lichess.org/study). Creates a new chapter in the study.

        If the PGN contains multiple games (separated by 2 or more newlines)
        then multiple chapters will be created within the study.

        Note that a study can contain at most 64 chapters.
      tags:
        - Studies
      security:
        - OAuth2: ["study:write"]
      parameters:
        - in: path
          name: studyId
          description: ID of the study
          schema:
            type: string
          required: true
      requestBody:
        description: Parameters of the import
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of the new chapter.
                    If multiple chapters are created, the names will be infered from the PGN tags.
                  minLength: 1
                  maxLength: 100
                pgn:
                  type: string
                  description: |
                    PGN to import. Can contain multiple games separated by 2 or more newlines.
                orientation:
                  type: string
                  description: Default board orientation.
                  enum:
                    - white
                    - black
                  default: white
                variant:
                  $ref: './schemas/VariantKey.yaml'
              required:
                - name
                - pgn
      responses:
        "200":
          description: The chapters that were created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/StudyImportPgnChapters.yaml'
        "400":
          description: The creation of the Swiss tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /study/by/{username}/export.pgn:
    get:
      operationId: studyExportAllPgn
      summary: Export all studies of a user
      description: |
        Download all chapters of all studies of a user in PGN format.

        If authenticated, then all public, unlisted, and private studies are included.

        If not, only public (non-unlisted) studies are included.
      tags:
        - Studies
      security:
        - OAuth2: ["study:read"]
      parameters:
        - in: path
          name: username
          description: The user whose studies we export
          required: true
          schema:
            type: string
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves, when available.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: true
        - in: query
          name: comments
          description: |
            Include analysis and annotator comments in the PGN moves, when available.

            Example: `12. Bxf6 { [%eval 0.23] } a3 { White is in a pickle. }`
          schema:
            type: boolean
            default: true
        - in: query
          name: variations
          description: |
            Include non-mainline moves, when available.

            Example: `4. d4 Bb4+ (4... Nc6 5. Nf3 Bb4+ 6. Bd2 (6. Nbd2 O-O 7. O-O) 6... Bd6) 5. Nd2`
          schema:
            type: boolean
            default: true
        - in: query
          name: source
          description: |
            Add a `Source` PGN tag with the study chapter URL.

            Example: `[Source "https://lichess.org/study/4NBHImfM/1Tk4IyTz"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: orientation
          description: |
            Add a `Orientation` PGN tag with the chapter predefined orientation.

            Example: `[Orientation "white"]`
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The studies of the user.
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/StudyPgn.yaml'

  /api/study/by/{username}:
    get:
      operationId: studyListMetadata
      summary: List studies of a user
      description: |
        Get metadata (name and dates) of all studies of a user.

        If authenticated, then all public, unlisted, and private studies are included.

        If not, only public (non-unlisted) studies are included.

        Studies are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Studies
      security:
        - OAuth2: ["study:read"]
      parameters:
        - in: path
          name: username
          description: The user whose studies we list
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The list of studies.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                type: array
                items:
                  $ref: './schemas/StudyMetadata.yaml'

  /api/broadcast:
    get:
      operationId: broadcastIndex
      summary: Get official broadcasts
      description: |
        Get all incoming, ongoing, and finished official broadcasts.
        The broadcasts are sorted by start date, most recent first.

        Broadcasts are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Broadcasts
      security: []
      parameters:
        - in: query
          name: nb
          description: Max number of broadcasts to fetch
          schema:
            type: integer
            default: 20
            minimum: 1
      responses:
        "200":
          description: The list of official broadcasts.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                type: array
                items:
                  $ref: './schemas/BroadcastTour.yaml'

  /broadcast/new:
    post:
      operationId: broadcastTourCreate
      summary: Create a broadcast tournament
      description: |
        Create a new broadcast tournament to relay external games.
        This endpoint accepts the same form data as the [web form](https://lichess.org/broadcast/new).
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:write"]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: './schemas/BroadcastForm.yaml'
      responses:
        "200":
          description: The broadcast tournament was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/BroadcastTour.yaml'
        "400":
          description: The creation of the broadcast tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /broadcast/{slug}/{broadcastTournamentId}:
    get:
      operationId: broadcastTourGet
      summary: Get your broadcast tournament
      description: |
        Get information about a broadcast tournament.
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:read"]
      parameters:
        - in: path
          name: slug
          description: The broadcast tournament slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastTournamentId` is actually used.
          required: true
          schema:
            type: string
        - in: path
          name: broadcastTournamentId
          description: The broadcast tournament ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The information about the broadcast tournament.
          content:
            application/json:
              schema:
                $ref: './schemas/BroadcastTour.yaml'

  /broadcast/{broadcastTournamentId}/edit:
      post:
        operationId: broadcastTourUpdate
        summary: Update your broadcast tournament
        description: |
          Update information about a broadcast tournament that you created.
          This endpoint accepts the same form data as the web form.
          All fields must be populated with data. Missing fields will override the broadcast with empty data.
        tags:
          - Broadcasts
        security:
          - OAuth2: ["study:write"]
        parameters:
          - in: path
            name: broadcastTournamentId
            description: The broadcast ID (8 characters).
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: './schemas/BroadcastForm.yaml'
        responses:
          "200":
            description: The broadcast tournament was successfully edited.
            headers:
              Access-Control-Allow-Origin:
                schema:
                  type: string
                  default: "'*'"
            content:
              application/json:
                schema:
                  $ref: './schemas/Ok.yaml'
          "400":
            description: The edition of the broadcast tournament failed.
            content:
              application/json:
                schema:
                  $ref: './schemas/Error.yaml'

  /broadcast/{broadcastTournamentId}/new:
    post:
      operationId: broadcastRoundCreate
      summary: Create a broadcast round
      description: |
        Create a new broadcast round to relay external games.
        This endpoint accepts the same form data as the web form.
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:write"]
      parameters:
        - in: path
          name: broadcastTournamentId
          description: The broadcast tournament ID (8 characters).
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of the broadcast round. Length must be between 3 and 80 characters.

                    Example: `Round 1`
                syncUrl:
                  type: string
                  description: |
                    URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.

                    Example: `https://myserver.org/myevent/round-10/games.pgn`

                    If the syncUrl is missing, then the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush).
                syncUrlRound:
                  type: string
                  description: |
                    Required if `syncUrl` contains a livechesscloud link.
                startsAt:
                  type: integer
                  description: |
                    Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round.

                    Example: `1356998400070`
                  minimum: 1356998400070
                delay:
                  type: integer
                  description: |
                    Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it.

                    Example: `900` (15 min)
                  minimum: 0
                  maximum: 1800
                period:
                  type: integer
                  description: |
                    (Only for Admins) Waiting time for each poll.
                  minimum: 2
                  maximum: 60
                finished:
                  type: boolean
                  description: |
                    Mark whether the round has been completed.
                  default: false
              required:
                - name
      responses:
        "200":
          description: The broadcast round was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/BroadcastRound.yaml'
        "400":
          description: The creation of the broadcast failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/broadcast/{broadcastTournamentSlug}/{broadcastRoundSlug}/{broadcastRoundId}:
    get:
      operationId: broadcastRoundGet
      summary: Get a broadcast round
      description: |
        Get information about a broadcast round.
      tags:
        - Broadcasts
      parameters:
        - in: path
          name: broadcastTournamentSlug
          description: The broadcast tournament slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actually used.
          required: true
          schema:
            type: string
        - in: path
          name: broadcastRoundSlug
          description: The broadcast round slug. Only used for SEO, the slug can be safely replaced by `-`. Only the `broadcastRoundId` is actually used.
          required: true
          schema:
            type: string
        - in: path
          name: broadcastRoundId
          description: The broadcast Round ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The information about the broadcast round.
          content:
            application/json:
              schema:
                $ref: './schemas/BroadcastRound.yaml'

  /broadcast/round/{broadcastRoundId}/edit:
    post:
      operationId: broadcastRoundUpdate
      summary: Update your broadcast round
      description: |
        Update information about a broadcast round that you created.
        This endpoint accepts the same form data as the web form.
        All fields must be populated with data. Missing fields will override the broadcast with empty data.
        For instance, if you omit `startDate`, then any pre-existing start date will be removed.
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:write"]
      parameters:
        - in: path
          name: broadcastRoundId
          description: The broadcast round ID (8 characters).
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of the broadcast round. Length must be between 3 and 80 characters.

                    Example: `Round 10`
                syncUrl:
                  type: string
                  description: |
                    URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.

                    Example: `https://myserver.org/myevent/round-10/games.pgn`
                syncUrlRound:
                  type: string
                  description: |
                    Required if `syncUrl` contains a livechesscloud link.
                startsAt:
                  type: integer
                  description: |
                    Timestamp in milliseconds of broadcast start. Leave empty to manually start the broadcast.

                    Example: `1356998400070`
                  minimum: 1356998400070
                delay:
                  type: integer
                  description: |
                    Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it.

                    Example: `900` (15 min)
                  minimum: 0
                  maximum: 1800
                period:
                  type: integer
                  description: |
                    (Only for Admins) Waiting time for each poll.
                  minimum: 2
                  maximum: 60
                finished:
                  type: boolean
                  description: |
                    Mark whether the round has been completed.
                  default: false
              required:
                - name
      responses:
        "200":
          description: The broadcast round was successfully edited.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The edition of the broadcast tournament failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /broadcast/round/{broadcastRoundId}/push:
    post:
      operationId: broadcastPush
      summary: Push PGN to your broadcast round
      description: |
        Update your broadcast with new PGN.
        Only for broadcast without a source URL.
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:write"]
      parameters:
       - in: path
         name: broadcastRoundId
         description: The broadcast round ID (8 characters).
         required: true
         schema:
           type: string
      requestBody:
        description: The PGN. It can contain up to 64 games, separated by a double new line.
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: The broadcast was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  moves:
                    type: integer
                example:
                  moves: 12
        "400":
          description: There was a problem with the pushed PGN.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                example:
                  error: "Cannot parse moves"

  /api/stream/broadcast/round/{broadcastRoundId}.pgn:
    get:
      operationId: broadcastStreamRoundPgn
      summary: Stream an ongoing broadcast tournament as PGN
      description: |
        This streaming endpoint first sends all games of a broadcast tournament in PGN format.

        Then, it waits for new moves to be played. As soon as it happens, the entire PGN of the game is sent to the stream.

        The stream will also send PGNs when games are added to the tournament.

        This is the best way to get updates about an ongoing tournament. Streaming means no polling,
        and no pollings means no latency, and minimum impact on the server.
      tags:
        - Broadcasts
      security: []
      parameters:
        - in: path
          name: broadcastRoundId
          description: The broadcast round ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The PGN representation of the tournament games, then the PGNs of games as they are updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/StudyPgn.yaml'

  /api/broadcast/round/{broadcastRoundId}.pgn:
    get:
      operationId: broadcastRoundPgn
      summary: Export one round as PGN
      description: |
        Download all games of a single round of a broadcast tournament in PGN format.

        You *could* poll this endpoint to get updates about a tournament, but it would be slow,
        and very inneficient.

        Instead, consider [streaming the tournament](#operation/broadcastStreamRoundPgn) to get
        a new PGN every time a game is updated, in real-time.
      tags:
        - Broadcasts
      security: []
      parameters:
        - in: path
          name: broadcastRoundId
          description: The round ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The PGN representation of the round.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/StudyPgn.yaml'

  /api/broadcast/{broadcastTournamentId}.pgn:
    get:
      operationId: broadcastAllRoundsPgn
      summary: Export all rounds as PGN
      description: |
        Download all games of all rounds of a broadcast in PGN format.

        If a `study:read` [OAuth token](#tag/OAuth) is provided,
        the private rounds where the user is a contributor will be available.

        You may want to [download only the games of a single round](#operation/broadcastRoundPgn) instead.
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:read"]
      parameters:
        - in: path
          name: broadcastTournamentId
          description: The broadcast tournament ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The PGN representation of the broadcast.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/StudyPgn.yaml'

  /api/broadcast/my-rounds:
    get:
      operationId: broadcastMyRoundsGet
      summary: Get your broadcast rounds
      description: |
        Stream all broadcast rounds you are a member of.
        Also includes broadcasts rounds you did not create, but were invited to.
        Also includes broadcasts rounds where you're a non-writing member. See the `writeable` flag in the response.
        Rounds are ordered by rank, which is roughly chronological, most recent first, slightly pondered with popularity.
      tags:
        - Broadcasts
      security:
        - OAuth2: ["study:read"]
      parameters:
        - in: query
          name: nb
          description: How many rounds to get
          schema:
            type: integer
            minimum: 1
            example: 20
      responses:
        "200":
          description: The broadcast rounds with their tournament and a `study.writeable` flag.
          content:
            application/json:
              schema:
                $ref: './schemas/BroadcastMyRound.yaml'

  /api/simul:
    get:
      operationId: apiSimul
      summary: Get current simuls
      description: |
        Get recently created, started, finished, simuls.

        Created and finished simul lists are not exhaustives, only those with
        strong enough host will be listed, the same filter is used to display simuls on https://lichess.org/simul.

        When [authenticated with OAuth2](#section/Introduction/Authentication), the pending list will be populated with your created, but unstarted simuls.
      tags:
        - Simuls
      security: []
      responses:
        "200":
          description: The list of simuls.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending:
                    type: array
                    items:
                      $ref: './schemas/Simul.yaml'
                  created:
                    type: array
                    items:
                      $ref: './schemas/Simul.yaml'
                  started:
                    type: array
                    items:
                      $ref: './schemas/Simul.yaml'
                  finished:
                    type: array
                    items:
                      $ref: './schemas/Simul.yaml'

  /api/team/{teamId}:
    get:
      operationId: teamShow
      summary: Get a single team
      description: Public info about a team. Includes the list of publicly visible leaders.
      tags:
        - Teams
      security: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The information about the team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Team.yaml'

  /api/team/all:
    get:
      operationId: teamAll
      summary: Get popular teams
      description: |
        Paginator of the most popular teams.
      tags:
        - Teams
      security: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            example: 1
            default: 1
      responses:
        "200":
          description: A paginated list of the most popular teams.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/TeamPaginatorJson.yaml'

  /api/team/of/{username}:
    get:
      operationId: teamOfUsername
      summary: Teams of a player
      description: |
        All the teams a player is a member of.
      tags:
        - Teams
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        "200":
          description: The list of teams the user is a member of.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/Team.yaml'

  /api/team/search:
    get:
      operationId: teamSearch
      summary: Search teams
      description: |
        Paginator of team search results for a keyword.
      tags:
        - Teams
      security: []
      parameters:
        - in: query
          name: text
          schema:
            type: string
            example: coders
        - in: query
          name: page
          schema:
            type: number
            example: 1
            default: 1
      responses:
        "200":
          description: The paginated list of teams.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/TeamPaginatorJson.yaml'

  /api/team/{teamId}/users:
    get:
      operationId: teamIdUsers
      summary: Get members of a team
      description: |
        Members are sorted by reverse chronological order of joining the team (most recent first).
        OAuth is only required if the list of members is private.

        Members are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Teams
      security:
        - OAuth2: ["team:read"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      responses:
        "200":
          description: The list of users in the team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/UserExtended.yaml'

  /api/team/{teamId}/arena:
    get:
      operationId: apiTeamArena
      summary: Get team Arena tournaments
      description: |
        Get all Arena tournaments relevant to a team.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Teams
        - "Arena tournaments"
      security: []
      parameters:
        - in: path
          name: teamId
          description: ID of the team
          schema:
            type: string
          required: true
        - in: query
          name: max
          description: How many tournaments to download.
          schema:
            type: integer
            minimum: 1
            default: 100
      responses:
        "200":
          description: The list of Arena tournaments of a team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/ArenaTournament.yaml'

  /team/{teamId}/join:
    post:
      operationId: teamIdJoin
      summary: Join a team
      description: |
        Join a team.
        If the team requires a password but the `password` field is incorrect,
        then the call fails with `403 Forbidden`.
        Similarly, if the team join policy requires a confirmation but the
        `message` parameter is not given, then the call fails with
        `403 Forbidden`.
      tags:
        - Teams
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Optional request message, if the team requires one.
                password:
                  type: string
                  description: Optional password, if the team requires one.
      responses:
        "200":
          description: The request to join a team was successfully sent.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /team/{teamId}/quit:
    post:
      operationId: teamIdQuit
      summary: Leave a team
      description: |
        Leave a team.
        - <https://lichess.org/team>
      tags:
        - Teams
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      responses:
        "200":
          description: The logged in user has successfully left the team.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/team/{teamId}/requests:
    get:
      operationId: teamRequests
      summary: Get join requests
      description: Get pending join requests of your team
      tags:
        - Teams
      security:
        - OAuth2: ["team:read"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
        - in: query
          name: declined
          description: Get the declined join requests
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: The list of pending join requests on your team
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/TeamRequestWithUser.yaml'
                example: [
        {
            "request": {
                "date": 1644232474472,
                "message": "Hello, I would like to join the team!",
                "teamId": "coders",
                "userId": "neio"
            },
            "user": {
                "createdAt": 1338509698620,
                "id": "neio",
                "perfs": {
                    "blitz": {
                        "games": 70,
                        "prog": 81,
                        "prov": true,
                        "rating": 1729,
                        "rd": 124
                    },
                    "chess960": {
                        "games": 2,
                        "prog": 0,
                        "prov": true,
                        "rating": 1528,
                        "rd": 266
                    },
                },
                "playTime": {
                    "total": 152902,
                    "tv": 20800
                },
                "profile": {
                    "bio": "yuwnt uyn",
                    "country": "AL",
                    "firstName": "wyutn w[fuyt",
                    "lastName": "ywut wyufth",
                },
                "seenAt": 1644232201429,
                "title": "NM",
                "username": "Neio"
            }
        }
  ]

  /api/team/{teamId}/request/{userId}/accept:
    post:
      operationId: teamRequestAccept
      summary: Accept join request
      description: Accept someone's request to join your team
      tags:
        - Teams
      security:
        - OAuth2: ["team:lead"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
        - in: path
          name: userId
          schema:
            type: string
            example: "neio"
          required: true
      responses:
        "200":
          description: The member has been added to the team.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/team/{teamId}/request/{userId}/decline:
    post:
      operationId: teamRequestDecline
      summary: Decline join request
      description: Decline someone's request to join your team
      tags:
        - Teams
      security:
        - OAuth2: ["team:lead"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
        - in: path
          name: userId
          schema:
            type: string
            example: "neio"
          required: true
      responses:
        "200":
          description: The join request has been declined and is no longer pending.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/team/{teamId}/kick/{userId}:
    post:
      operationId: teamIdKickUserId
      summary: Kick a user from your team
      description: |
        Kick a member out of one of your teams.
        - <https://lichess.org/team>
      tags:
        - Teams
      security:
        - OAuth2: ["team:lead"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
        - in: path
          name: userId
          schema:
            type: string
            example: "neio"
          required: true
      responses:
        "200":
          description: The member has been kicked from the team.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /team/{teamId}/pm-all:
    post:
      operationId: teamIdPmAll
      summary: Message all members
      description: |
        Send a private message to all members of a team.
        You must be a team leader with the "Messages" permission.
      tags:
        - Teams
      security:
        - OAuth2: ["team:lead"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message to send to all your team members.
      responses:
        "200":
          description: The message has successfully been sent to all team members.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The sending of message to all team members has failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/streamer/live:
    get:
      operationId: streamerLive
      summary: Get live streamers
      description: |
        Get basic info about currently streaming users.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).
      tags:
        - Users
      security: []
      responses:
        "200":
          description: The list of live streamers and their respective information.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/LightUser.yaml'
                example: [
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "patron": true,
                    "stream": {
                      "service": "twitch",
                      "status": "Tuesday night 🐴 chess | lichess.org",
                      "lang": "en"
                    },
                    "streamer": {
                      "name": "ChessNetwork",
                      "headline": "Chess with commentary, tournament competition, viewer interaction, and more.",
                      "description": "I'm a self-taught National Master in chess from Pennsylvania, USA who was introduced to the game by my father in 1988 at age 8. I've been playing since, enjoy teaching, and have been a broadcaster of all things chess since 2011. It's my hope your experience with this stream is both fun and educational. 😎
-Jerry",
                      "twitch": "https://twitch.tv/chessnetwork",
                      "youTube": "https://www.youtube.com/channel/UCCDOQrpqLqKVcTCKzqarxLg/live",
                      "image": "https://image.lichess1.org/display?h=350&op=thumbnail&path=orlandikill:streamer:orlandikill:wiw356Np.jpg&w=350&sig=9912e0c45e42f37e7cd2716af6bd41bb10497b0c"
                    }
                  }
                ]

  /api/crosstable/{user1}/{user2}:
    get:
      operationId: apiCrosstable
      summary: Get crosstable
      description: |
        Get total number of games, and current score, of any two users.

        If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
      tags:
        - Users
      security: []
      parameters:
        - in: path
          name: user1
          schema:
            type: string
          required: true
        - in: path
          name: user2
          schema:
            type: string
          required: true
        - in: query
          name: matchup
          description: Whether to get the current match data, if any
          schema:
            type: boolean
      responses:
        "200":
          description: The crosstable of the two users.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Crosstable.yaml'

  /api/player/autocomplete:
    get:
      operationId: apiPlayerAutocomplete
      summary: Autocomplete usernames
      description: |
        Provides autocompletion options for an incomplete username.
      tags:
        - Users
      security: []
      parameters:
        - in: query
          name: term
          description: The beginning of a username
          schema:
            type: string
            minLength: 3
          required: true
        - in: query
          name: object
          description: |
            - `false` returns an array of usernames
            - `true` returns an object with matching users
          schema:
            type: boolean
            default: false
        - in: query
          name: friend
          description: |
            Returns followed players matching `term` if any, else returns other players.
            Requires [OAuth](#tag/OAuth).
          schema:
            type: boolean
      responses:
        "200":
          description: An array of players which usernames start with the provided term.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: './schemas/LightUserOnline.yaml'

  /api/user/{username}/note:
    post:
      operationId: writeNote
      summary: Add a note for a user
      description: |
        Add a private note available only to you about this account.
      tags:
        - Users
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  description: The contents of the note
                  type: string
              required:
                - text
      responses:
        "200":
          description: The note was successfully added.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
    get:
      operationId: readNote
      summary: Get notes for a user
      description: |
        Get the private notes that you have added for a user.
      tags:
        - Users
      security:
        - OAuth2: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        "200":
          description: The list of notes you have added for this user
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/UserNote.yaml'
                example: [
                  {
                    "from": {
                      "name": "thibault",
                      "patron": true,
                      "id": "thibault"
                    },
                    "to": {
                      "name": "DrNykterstein",
                      "title": "GM",
                      "patron": true,
                      "id": "drnykterstein"
                    },
                    "text": "This guy is good at chess",
                    "date": 1690585691898
                  }
                ]

  /api/rel/following:
    get:
      operationId: apiUserFollowing
      summary: Get users followed by the logged in user
      description: |
        Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Relations
      security:
        - OAuth2: ["follow:read"]
      responses:
        "200":
          description: The list of users followed by a user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/UserExtended.yaml'

  /api/rel/follow/{username}:
    post:
      operationId: followUser
      summary: Follow a player
      description: |
        Follow a player, adding them to your list of Lichess friends.
      tags:
        - Relations
      security:
        - OAuth2: ["follow:write"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        "200":
          description: The player was successfully added.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/rel/unfollow/{username}:
    post:
      operationId: unfollowUser
      summary: Unfollow a player
      description: |
        Unfollow a player, removing them from your list of Lichess friends.
      tags:
        - Relations
      security:
        - OAuth2: ["follow:write"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "thibault"
          required: true
      responses:
        "200":
          description: The player was successfully removed.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/stream/event:
    get:
      operationId: apiStreamEvent
      summary: Stream incoming events
      description: "\n
      \ Stream the events reaching a lichess user in real time as [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\n
      \ An empty line is sent every 6 seconds for keep alive purposes.\n\n
      \ Each non-empty line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameStart` Start of a game\n
      \ - `gameFinish` Completion of a game\n
      \ - `challenge` A player sends you a challenge or you challenge someone\n
      \ - `challengeCanceled` A player cancels their challenge to you\n
      \ - `challengeDeclined` The opponent declines your challenge\n
      \n
      \ When the stream opens, all current challenges and games are sent."
      tags:
        - Board
        - Bot
      security:
        - OAuth2: ["challenge:read", "bot:play", "board:play"]
      responses:
        "200":
          description: The stream of events reaching the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                oneOf:
                  - $ref: './schemas/GameStartEvent.yaml'
                  - $ref: './schemas/GameFinishEvent.yaml'
                  - $ref: './schemas/ChallengeEvent.yaml'
                  - $ref: './schemas/ChallengeCanceledEvent.yaml'
                  - $ref: './schemas/ChallengeDeclinedEvent.yaml'
              examples:
                challenge:
                  $ref: '#/components/examples/challenge'
                challengeCanceled:
                  $ref: '#/components/examples/challengeCanceled'
                challengeDeclined:
                  $ref: '#/components/examples/challengeDeclined'
                gameStart:
                  $ref: '#/components/examples/gameStart'
                gameFinish:
                  $ref: '#/components/examples/gameFinish'


  /api/board/seek:
    post:
      operationId: apiBoardSeek
      summary: Create a seek
      description: "\n
      \ Create a public seek, to start a game with a random player.\n\n
      \ ### Real-time seek\n\n
      \ Specify the `time` and `increment` clock values.
      \ The response is streamed but doesn't contain any information.\n\n
      \ **Keep the connection open to keep the seek active**.\n\n
      \ If the client closes the connection, the seek is canceled. This way, if the client terminates, the user won't be paired in a game they wouldn't play.\n
      \ When the seek is accepted, or expires, the server closes the connection.\n\n
      \ **Make sure to also have an [Event stream](#operation/apiStreamEvent) open**, to be notified when a game starts.\n
      \ We recommend opening the [Event stream](#operation/apiStreamEvent) first, then the seek stream. This way,\n
      \ you won't miss the game event if the seek is accepted immediately.\n\n
      \ ### Correspondence seek\n\n
      \ Specify the `days` per turn value.
      \ The response is not streamed, it immediately completes with the seek ID. The seek remains active on the server until it is joined by someone."
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      requestBody:
        description: Parameters of the seek
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Whether the game is rated and impacts players ratings.
                  example: true
                  default: false
                time:
                  type: number
                  description: Clock initial time in minutes. Required for real-time seeks.
                  example: 15
                  minimum: 0
                  maximum: 180
                increment:
                  type: integer
                  description: Clock increment in seconds. Required for real-time seeks.
                  example: 15
                  minimum: 0
                  maximum: 180
                days:
                  type: integer
                  description: Days per turn. Required for correspondence seeks.
                  enum:
                    - 1
                    - 2
                    - 3
                    - 5
                    - 7
                    - 10
                    - 14
                variant:
                  $ref: './schemas/VariantKey.yaml'
                color:
                  type: string
                  description: The color to play. Better left empty to automatically get 50% white.
                  enum:
                    - random
                    - white
                    - black
                  default: random
                ratingRange:
                  type: string
                  description: |
                    The rating range of potential opponents. Better left empty.
                    Example: 1500-1800
      responses:
        "200":
          description: The seek was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            text/plain:
              example: ""
        "400":
          description: The creation of the seek failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/stream/{gameId}:
    get:
      operationId: boardGameStream
      summary: Stream Board game state
      description: "\
      \ Stream the state of a game being played with the Board API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\
      \nUse this endpoint to get updates about the game in real-time, with a single request.\n\
      \nEach line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameFull` Full game data. All values are immutable, except for the `state` field.\n
      \ - `gameState` Current state of the game. Immutable values not included. Sent when a move is played, a draw is offered, or when the game ends.\n
      \ - `chatLine` Chat message sent by a user in the `room` \"player\" or \"spectator\".\n\n
      \ - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.\n\n
      \nThe first line is always of type `gameFull`.\n\n
      \nThe server closes the stream when the game ends, or if the game has already ended."
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The stream of the game.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                oneOf:
                  - $ref: './schemas/GameFullEvent.yaml'
                  - $ref: './schemas/GameStateEvent.yaml'
                  - $ref: './schemas/ChatLineEvent.yaml'
                  - $ref: './schemas/OpponentGone.yaml'
              examples:
                gameFull:
                  $ref: '#/components/examples/gameFull'
                gameState:
                  $ref: '#/components/examples/gameState'
                chatLine:
                  $ref: '#/components/examples/chatLine'
                chatLineSpectator:
                  $ref: '#/components/examples/chatLineSpectator'
                opponentGoneTrue:
                  $ref: '#/components/examples/opponentGoneTrue'
                opponentGoneFalse:
                  $ref: '#/components/examples/opponentGoneFalse'
                gameStateResign:
                  $ref: '#/components/examples/gameStateResign'
        "404":
          description: The game was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'

  /api/board/game/{gameId}/move/{move}:
    post:
      operationId: boardGameMove
      summary: Make a Board move
      description: |
        Make a move in a game being played with the Board API.

        The move can also contain a draw offer/agreement.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: move
          required: true
          description: The move to play, in UCI format
          schema:
            type: string
            example: "e2e4"
        - in: query
          name: offeringDraw
          description: Whether to offer (or agree to) a draw
          schema:
            type: boolean
      responses:
        "200":
          description: The move was successfully made.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The move failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/{gameId}/chat:
    parameters:
      - in: path
        name: gameId
        schema:
          type: string
          example: "5IrD6Gzz"
        required: true
    post:
      operationId: boardGameChatPost
      summary: Write in the chat
      description: |
        Post a message to the player or spectator chat, in a game being played with the Board API.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                room:
                  type: string
                  enum:
                  - player
                  - spectator
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - room
                - text
      responses:
        "200":
          description: The message was successfully posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The posting of the message in the chat failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'
    get:
      operationId: boardGameChatGet
      summary: Fetch the game chat
      description: |
        Get the messages posted in the game chat
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      responses:
        "200":
          description: The messages posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/GameChat.yaml'

  /api/board/game/{gameId}/abort:
    post:
      operationId: boardGameAbort
      summary: Abort a game
      description: |
        Abort a game being played with the Board API.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The game successfully aborted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The abortion of the game failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/{gameId}/resign:
    post:
      operationId: boardGameResign
      summary: Resign a game
      description: |
        Resign a game being played with the Board API.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The game was successfully resigned.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The resigning from the game failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/{gameId}/draw/{accept}:
    post:
      operationId: boardGameDraw
      summary: Handle draw offers
      description: |
        Create/accept/decline draw offers.
        - `yes`: Offer a draw, or accept the opponent's draw offer.
        - `no`: Decline a draw offer from the opponent.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: accept
          schema:
            anyOf:
              - type: boolean
              - type: string
                const: yes
            example: "yes"
          required: true
      responses:
        "200":
          description: The draw offer was successfully sent.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The draw offering failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/{gameId}/takeback/{accept}:
    post:
      operationId: boardGameTakeback
      summary: Handle takeback offers
      description: |
        Create/accept/decline takebacks.
        - `yes`: Propose a takeback, or accept the opponent's takeback offer.
        - `no`: Decline a takeback offer from the opponent.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: accept
          schema:
            anyOf:
              - type: boolean
              - type: string
                const: yes
            example: "yes"
          required: true
      responses:
        "200":
          description: The takeback offer was successfully sent.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The takeback offering failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/{gameId}/claim-victory:
    post:
      operationId: boardGameClaimVictory
      summary: Claim victory of a game
      description: |
        Claim victory when the opponent has left the game for a while.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The victory was successfully claimed.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The victory claim has failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/board/game/{gameId}/berserk:
    post:
      operationId: boardGameBerserk
      summary: Berserk a tournament game
      description: |
        Go berserk on an arena tournament game. Halves the clock time, grants an extra point upon winning.
        Only available in arena tournaments that allow berserk, and before each player has made a move.
      tags:
        - Board
      security:
        - OAuth2: ["board:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The player successfully whent berserk.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The berserk has failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/bot/online:
    get:
      operationId: apiBotOnline
      summary: Get online bots
      tags:
        - Bot
      security: []
      description: Stream the [online bot users](https://lichess.org/player/bots), as [ndjson](#section/Introduction/Streaming-with-ND-JSON). Throttled to 50 bot users per second.
      parameters:
        - in: query
          name: nb
          description: How many bot users to fetch
          schema:
            type: integer
            minimum: 1
            example: 20
      responses:
        "200":
          description: The list of online bot users
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/User.yaml'

  /api/bot/account/upgrade:
    post:
      operationId: botAccountUpgrade
      summary: Upgrade to Bot account
      description: |
        Upgrade a lichess player account into a Bot account. Only Bot accounts can use the Bot API.

        The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.

        To upgrade an account to Bot, use the [official lichess-bot client](https://github.com/lichess-bot-devs/lichess-bot), or follow these steps:
        - Create an [API access token](https://lichess.org/account/oauth/token/create?scopes[]=bot:play) with "Play bot moves" permission.
        - `curl -d '' https://lichess.org/api/bot/account/upgrade -H "Authorization: Bearer <yourTokenHere>"`

        To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
        the `title` field should be set to `BOT`.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      responses:
        "200":
          description: The bot account was successfully upgraded.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The upgrade of the bot account failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/bot/game/stream/{gameId}:
    get:
      operationId: botGameStream
      summary: Stream Bot game state
      description: "\
      \ Stream the state of a game being played with the Bot API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\
      \nUse this endpoint to get updates about the game in real-time, with a single request.\n\
      \nEach line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameFull` Full game data. All values are immutable, except for the `state` field.\n
      \ - `gameState` Current state of the game. Immutable values not included.\n
      \ - `chatLine` Chat message sent by a user (or the bot itself) in the `room` \"player\" or \"spectator\".\n\n
      \ - `opponentGone` Whether the opponent has left the game, and how long before you can claim a win or draw.\n\n
      \nThe first line is always of type `gameFull`."
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The stream of the bot game.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                oneOf:
                  - $ref: './schemas/GameFullEvent.yaml'
                  - $ref: './schemas/GameStateEvent.yaml'
                  - $ref: './schemas/ChatLineEvent.yaml'
                  - $ref: './schemas/OpponentGone.yaml'
              examples:
                gameFull:
                  $ref: '#/components/examples/gameFull'
                gameState:
                  $ref: '#/components/examples/gameState'
                chatLine:
                  $ref: '#/components/examples/chatLine'
                chatLineSpectator:
                  $ref: '#/components/examples/chatLineSpectator'
                opponentGoneTrue:
                  $ref: '#/components/examples/opponentGoneTrue'
                opponentGoneFalse:
                  $ref: '#/components/examples/opponentGoneFalse'
                gameStateResign:
                  $ref: '#/components/examples/gameStateResign'
        "404":
          description: The bot game was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'

  /api/bot/game/{gameId}/move/{move}:
    post:
      operationId: botGameMove
      summary: Make a Bot move
      description: |
        Make a move in a game being played with the Bot API.

        The move can also contain a draw offer/agreement.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: move
          required: true
          description: The move to play, in UCI format
          schema:
            type: string
            example: "e2e4"
        - in: query
          name: offeringDraw
          description: Whether to offer (or agree to) a draw
          schema:
            type: boolean
      responses:
        "200":
          description: The bot move was successfully made.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The bot move failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/bot/game/{gameId}/chat:
    post:
      operationId: botGameChat
      summary: Write in the chat
      description: |
        Post a message to the player or spectator chat, in a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                room:
                  type: string
                  enum:
                  - player
                  - spectator
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - room
                - text
      responses:
        "200":
          description: The message was successfully posted in chat.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The posting of the  message in chat failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'
    get:
      operationId: botGameChatGet
      summary: Fetch the game chat
      description: |
        Get the messages posted in the game chat
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The messages posted in the chat.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: './schemas/GameChat.yaml'

  /api/bot/game/{gameId}/abort:
    post:
      operationId: botGameAbort
      summary: Abort a game
      description: |
        Abort a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The game was successfully aborted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The abortion of the game failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/bot/game/{gameId}/resign:
    post:
      operationId: botGameResign
      summary: Resign a game
      description: |
        Resign a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The game was successfully resigned from.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: Resigning the game failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/bot/game/{gameId}/draw/{accept}:
    post:
      operationId: botGameDraw
      summary: Handle draw offers in bot games
      description: |
        Create/accept/decline draw offers in bot games
        - `yes`: Offer a draw, or accept the opponent's draw offer.
        - `no`: Decline a draw offer from the opponent.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: accept
          schema:
            anyOf:
              - type: boolean
              - type: string
                const: yes
            example: "yes"
          required: true
      responses:
        "200":
          description: The draw offer was successfully sent.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The draw offering failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'


  /api/challenge:
    get:
      operationId: challengeList
      summary: List your challenges
      description: |
        Get a list of challenges created by or targeted at you.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:read"]
      responses:
        "200":
          description: The list of challenges created by or targeted at the logged in user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: object
                properties:
                  in:
                    type: array
                    description: Incoming challenges i.e. targeted at you
                    items:
                      $ref: './schemas/ChallengeJson.yaml'
                  out:
                    type: array
                    description: Outgoing challenges i.e. created by you
                    items:
                      $ref: './schemas/ChallengeJson.yaml'

  /api/challenge/{username}:
    post:
      operationId: challengeCreate
      summary: Create a challenge
      description: |
        Challenge someone to play. The targeted player can choose to accept or decline.

        If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
        that a new game has started. The game ID will be the same as the challenge ID.

        Challenges for realtime games (not correspondence) expire after 20s if not accepted.
        To prevent that, use the `keepAliveStream` flag described below.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "LeelaChess"
          required: true
      requestBody:
        description: Parameters of the challenge
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                  default: false
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created. Valid values are 0, 15, 30, 45, 60, 90, and any multiple of 60 up to 10800 (3 hours).
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  enum:
                    - 1
                    - 2
                    - 3
                    - 5
                    - 7
                    - 10
                    - 14
                color:
                  type: string
                  description: Which color you get to play
                  enum:
                    - random
                    - white
                    - black
                  default: 'random'
                variant:
                  $ref: './schemas/VariantKey.yaml'
                fen:
                  $ref: './schemas/FromPositionFEN.yaml'
                keepAliveStream:
                  type: boolean
                  description: |
                    If set, the response is streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
                    The challenge is kept alive until the connection is closed by the client.
                    When the challenge is accepted, declined or canceled, a message of the form `{"done":"accepted"}` is sent,
                    then the connection is closed by the server.
                    If not set, the response is not streamed, and the challenge expires after 20s if not accepted.
                rules:
                  type: string
                  enum:
                    - noAbort
                    - noRematch
                    - noGiveTime
                    - noClaimWin
                    - noEarlyDraw
                  description: |
                    Extra game rules separated by commas.
                    Example: `noAbort,noRematch`
      responses:
        "200":
          description: The challenge was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: object
                properties:
                  challenge:
                    $ref: './schemas/ChallengeJson.yaml'
        "400":
          description: The creation of the challenge failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/challenge/{challengeId}/accept:
    post:
      operationId: challengeAccept
      summary: Accept a challenge
      description: |
        Accept an incoming challenge.

        You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The challenge was successfully accepted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "404":
          description: The challenge to accept was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'

  /api/challenge/{challengeId}/decline:
    post:
      operationId: challengeDecline
      summary: Decline a challenge
      description: |
        Decline an incoming challenge.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        description: Details related to decline of challenge
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/master/translation/source/challenge.xml#L14).
                  enum:
                    - generic
                    - later
                    - tooFast
                    - tooSlow
                    - timeControl
                    - rated
                    - casual
                    - standard
                    - variant
                    - noBot
                    - onlyBot
      responses:
        "200":
          description: The challenge was successfully declined.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "404":
          description: The challenge to decline was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'

  /api/challenge/{challengeId}/cancel:
    post:
      operationId: challengeCancel
      summary: Cancel a challenge
      description: |
        Cancel a challenge you sent, or aborts the game if the challenge was accepted, but the game was not yet played.
        Note that the ID of a game is the same as the ID of the challenge that created it.

        Works for user challenges and open challenges alike.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: query
          name: opponentToken
          description: Optional `challenge:write` token of the opponent. If set, the game can be canceled even if both players have moved.
          schema:
            type: string
      responses:
        "200":
          description: The challenge was successfully cancelled.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "404":
          description: The challenge to cancel was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'

  /api/challenge/ai:
    post:
      operationId: challengeAi
      summary: Challenge the AI
      description: |
        Start a game with Lichess AI.

        You will be notified on the [event stream](#operation/apiStreamEvent) that a new game has started.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play", "board:play"]
      requestBody:
        description: Parameters of the game
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                level:
                  type: number
                  description: AI strength
                  minimum: 1
                  maximum: 8
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  enum:
                    - 1
                    - 2
                    - 3
                    - 5
                    - 7
                    - 10
                    - 14
                color:
                  type: string
                  description: Which color you get to play
                  enum:
                    - random
                    - white
                    - black
                  default: 'random'
                variant:
                  $ref: './schemas/VariantKey.yaml'
                fen:
                  $ref: './schemas/FromPositionFEN.yaml'
      responses:
        "201":
          description: The game with Lichess AI was successfully started.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/GameJson.yaml'
        "400":
          description: The creation of a game with Lichess AI failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/challenge/open:
    post:
      operationId: challengeOpen
      summary: Open-ended challenge
      description: |
        Create a challenge that any 2 players can join.

        Share the URL of the challenge. the first 2 players to click it will be paired for a game.

        The response body also contains `whiteUrl` and `blackUrl`.
        You can control which color each player gets by giving them these URLs,
        instead of the main challenge URL.

        Open challenges expire after 24h.

        If the challenge creation is [authenticated with OAuth2](#section/Introduction/Authentication),
        then you can use the [challenge cancel endpoint](#operation/challengeCancel) to cancel it.

        To directly pair 2 known players, use [this endpoint](#operation/bulkPairingList) instead.
      tags:
        - Challenges
      security: []
      requestBody:
        description: Parameters of the game
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                  default: false
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per turn. For correspondence challenges.
                  enum:
                    - 1
                    - 2
                    - 3
                    - 5
                    - 7
                    - 10
                    - 14
                variant:
                  $ref: './schemas/VariantKey.yaml'
                fen:
                  $ref: './schemas/FromPositionFEN.yaml'
                name:
                  type: string
                  description: Optional name for the challenge, that players will see on the challenge page.
                rules:
                  type: string
                  enum:
                    - noRematch
                    - noGiveTime
                    - noClaimWin
                    - noEarlyDraw
                    - noAbort
                  description: |
                    Extra game rules separated by commas.
                    Example: `noRematch,noGiveTime`
                    The `noAbort` rule is available for Lichess admins only
                users:
                  type: string
                  description: |
                    Optional pair of usernames, separated by a comma.
                    If set, only these users will be allowed to join the game.
                    The first username gets the white pieces.
                    Example: `Username1,Username2`
                expiresAt:
                  type: integer
                  description: Timestamp in milliseconds to expire the challenge. Defaults to 24h after creation. Can't be more than 2 weeks after creation.
      responses:
        "200":
          description: The challenge was successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ChallengeOpenJson.yaml'
        "400":
          description: The creation of the challenge failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/challenge/{gameId}/start-clocks:
    post:
      operationId: challengeStartClocks
      summary: Start clocks of a game
      description: |
        Start the clocks of a game immediately, even if a player has not yet made a move.

        Requires the OAuth tokens of both players with `challenge:write` scope.

        If the clocks have already started, the call will have no effect.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            description: ID of the game
          required: true
        - in: query
          name: token1
          description: OAuth token of a player
          schema:
            type: string
        - in: query
          name: token2
          description: OAuth token of the other player
          schema:
            type: string
      responses:
        "200":
          description: The clock of a game was successfully started.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/bulk-pairing:
    get:
      operationId: bulkPairingList
      summary: View your bulk pairings
      description: |
        Get a list of bulk pairings you created.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      responses:
        "200":
          description: The list of bulk pairing the logged in user created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/BulkPairing.yaml'
    post:
      operationId: bulkPairingCreate
      summary: Create a bulk pairing
      description: |
        Schedule many games at once, up to 24h in advance.

        OAuth tokens are required for all paired players, with the `challenge:write` scope.

        You can schedule up to 500 games every 10 minutes. [Contact us](mailto:contact@lichess.org) if you need higher limits.

        If games have a real-time clock, each player must have only one pairing.
        For correspondence games, players can have multiple pairings within the same bulk.

        The entire bulk is rejected if:
          - a token is missing
          - a token is present more than once (except in correspondence)
          - a token lacks the `challenge:write` scope
          - a player account is closed
          - a player is paired more than once (except in correspondence)
          - a bulk is already scheduled to start at the same time with the same player
          - you have 20 scheduled bulks
          - you have 1000 scheduled games

        Partial bulks are never created. Either it all fails, or it all succeeds.
        When it fails, it does so with an error message explaining the issue.
        Failed bulks are not counted in the rate limiting, they are free.
        Fix the issues, manually or programmatically, then retry to schedule the bulk.

        A successful bulk creation returns a JSON bulk document. Its ID can be used for further operations.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      requestBody:
        description: Parameters of the pairings
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                players:
                  type: string
                  description: |
                    OAuth tokens of all the players to pair, with the syntax `tokenOfWhitePlayerInGame1:tokenOfBlackPlayerInGame1,tokenOfWhitePlayerInGame2:tokenOfBlackPlayerInGame2,...`.

                    The 2 tokens of the players of a game are separated with `:`. The first token gets the white pieces. Games are separated with `,`.

                    Up to 1000 tokens can be sent, for a max of 500 games.

                    Each token must be included at most once.

                    Example: `token1:token2,token3:token4,token5:token6`
                'clock.limit':
                  type: number
                  description: |
                    Clock initial time in seconds. Example: `600`
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: |
                    Clock increment in seconds. Example: `2`
                  minimum: 0
                  maximum: 60
                days:
                  type: integer
                  description: Days per turn. For correspondence games only.
                  enum:
                    - 1
                    - 2
                    - 3
                    - 5
                    - 7
                    - 10
                    - 14
                pairAt:
                  description: |
                    Date at which the games will be created as a Unix timestamp in milliseconds.
                    Up to 7 days in the future.
                    Omit, or set to current date and time, to start the games immediately.
                    Example: `1612289869919`
                  type: integer
                startClocksAt:
                  description: |
                    Date at which the clocks will be automatically started as a Unix timestamp in milliseconds.
                    Up to 7 days in the future.
                    Note that the clocks can start earlier than specified, if players start making moves in the game.
                    If omitted, the clocks will not start automatically.
                    Example: `1612289869919`
                  type: integer
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings
                  default: false
                variant:
                  $ref: './schemas/VariantKey.yaml'
                fen:
                  $ref: './schemas/FromPositionFEN.yaml'
                message:
                  type: string
                  description: |
                    Message that will be sent to each player, when the game is created.  It is sent from your user account.

                    `{opponent}` and `{game}` are placeholders that will be replaced with the opponent and the game URLs.

                    You can omit this field to send the default message,
                    but if you set your own message, it must at least contain the `{game}` placeholder.
                  default: "Your game with {opponent} is ready: {game}."
                rules:
                  type: string
                  enum:
                    - noAbort
                    - noRematch
                    - noGiveTime
                    - noClaimWin
                    - noEarlyDraw
                  description: |
                    Extra game rules separated by commas.
                    Example: `noAbort,noRematch`
      responses:
        "200":
          description: The bulk pairing has been successfully created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/BulkPairing.yaml'
        "400":
          description: The creation of the bulk pairings failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/bulk-pairing/{id}/start-clocks:
    post:
      operationId: bulkPairingStartClocks
      summary: Manually start clocks
      description: |
        Immediately start all clocks of the games of a bulk pairing.

        This overrides the `startClocksAt` value of an existing bulk pairing.

        If the games have not yet been created (`bulk.pairAt` is in the future), then this does nothing.

        If the clocks have already started (`bulk.startClocksAt` is in the past), then this does nothing.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            description: The ID of the bulk pairing
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The clocks of the games of a bulk pairing were successfully started.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "404":
          description: The bulk pairing was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'

  /api/bulk-pairing/{id}:
    get:
      operationId: bulkPairingGet
      summary: Show a bulk pairing
      description: |
        Get a single bulk pairing by its ID.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            description: The ID of the bulk pairing
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The bulk pairing.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/BulkPairing.yaml'
        "404":
          description: The bulk pairing was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'
    delete:
      operationId: bulkPairingDelete
      summary: Cancel a bulk pairing
      description: |
        Cancel and delete a bulk pairing that is scheduled in the future.

        If the games have already been created, then this does nothing.

        Canceling a bulk pairing does not refund the rate limit cost of that bulk pairing.
      tags:
        - Bulk pairings
      security:
        - OAuth2: ["challenge:bulk"]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            description: The ID of the bulk pairing
            example: "5IrD6Gzz"
          required: true
      responses:
        "200":
          description: The bulk pairing was successfully deleted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "404":
          description: The bulk pairing to delete was not found.
          content:
            application/json:
              schema:
                $ref: './schemas/NotFound.yaml'


  /api/round/{gameId}/add-time/{seconds}:
    post:
      operationId: roundAddTime
      summary: Add time to the opponent clock
      description: |
        Add seconds to the opponent's clock. Can be used to create games with time odds.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            description: ID of the game
          required: true
        - in: path
          name: seconds
          description: How many seconds to give
          schema:
            type: string
            minimum: 1
            maximum: 86400
          required: true
      responses:
        "200":
          description: Time was successfully added to the opponent's clock.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/token/admin-challenge:
    post:
      operationId: adminChallengeTokens
      summary: Admin challenge tokens
      description: |
        **This endpoint can only be used by Lichess administrators. It will not work if you do not have the appropriate permissions.** Tournament organizers should instead use [OAuth](#tag/OAuth) to obtain `challenge:write` tokens from users in order to perform bulk pairing.*

        Create and obtain `challenge:write` tokens for multiple users.

        If a similar token already exists for a user, it is reused. This endpoint is idempotent.
      tags:
        - Challenges
      security:
        - OAuth2: ["web:mod"]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                users:
                  description: Usernames separated with commas
                  type: string
                  example: thibault,neio,lizen2,lizen3
                description:
                  description: User visible description of the token
                  type: string
                  example: "FIDE tournament XYZ"
              required:
                - users
                - description
      responses:
        "200":
          description: The `challenge:write` tokens of each user
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              example: { "thibault": "lLOEkpH58W599xH9", "neio": "nAYTIJphwWFwKmKk", "lizen2": "1cnHhuWKHROgiPC4", "lizen3": "SszJ9Sj1bto0UQCK" }
        "400":
          description: The creation of the tokens failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /inbox/{username}:
    post:
      operationId: inboxUsername
      summary: Send a private message
      description: |
        Send a private message to another player.
      tags:
        - Messaging
      security:
        - OAuth2: ["msg:write"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "someplayer"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - text
      responses:
        "200":
          description: The private message has been successfully sent.
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'
        "400":
          description: The sending of the private message has failed.
          content:
            application/json:
              schema:
                $ref: './schemas/Error.yaml'

  /api/cloud-eval:
    get:
      operationId: apiCloudEval
      summary: Get cloud evaluation of a position.
      description: |
        Get the cached evaluation of a position, if available.

        Opening positions have more chances of being available. There are about 15 million positions in the database.

        Up to 5 variations may be available. Variants are supported.

        Use this endpoint to fetch a few positions here and there.
        If you want to download a lot of positions, [get the full list](https://database.lichess.org/#evals) from our exported database.
      tags:
        - Analysis
      security: []
      parameters:
        - in: query
          name: fen
          required: true
          description: FEN of the position
          schema:
            type: string
          example: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
        - in: query
          name: multiPv
          description: Number of variations
          schema:
            type: number
            default: 1
        - in: query
          name: variant
          description: Variant
          schema:
            $ref: './schemas/VariantKey.yaml'
      responses:
        "200":
          description: The evaluation of the position.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              example: {
                "fen": "rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2",
                "knodes": 13683,
                "depth": 22,
                "pvs": [
                  {"moves": "c8f5 d2d4 e7e6 g1f3 g8e7 c1e3 c7c5 d4c5 e7c6 b1c3", "cp": -13},
                  {"moves": "c7c5 c2c3 d5d4 g1f3 b8c6 c3d4 c6d4 b1c3 c8d7 f1d3", "cp": -1},
                  {"moves": "e7e6 d2d4 c7c5 c2c3 b8c6 g1f3 c8d7 b1a3 c5d4 c3d4", "cp": 24}
                ]
              }

  /api/external-engine:
    get:
      operationId: apiExternalEngineList
      summary: List external engines
      tags:
        - External engine
      security:
        - OAuth2: ["engine:read"]
      description: |
        Lists all external engines that have been registered for the user,
        and the credentials required to use them.
      responses:
        "200":
          description: A list of external engines.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/ExternalEngine.yaml'
    post:
      operationId: apiExternalEngineCreate
      summary: Create external engine
      tags:
        - External engine
      security:
        - OAuth2: ["engine:write"]
      description: |
        Registers a new external engine for the user. It can then be selected
        and used on the analysis board.

        After registering, the provider should start waiting for analyis requests.
      requestBody:
        description: A new external engine registration.
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/ExternalEngineRegistration.yaml'
      responses:
        "200":
          description: The registered engine.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ExternalEngine.yaml'

  /api/external-engine/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The external engine id.
        schema:
          type: string
        example: eei_aTKImBJOnv6j
    get:
      operationId: apiExternalEngineGet
      summary: Get external engine
      tags:
        - External engine
      security:
        - OAuth2: ["engine:read"]
      description: |
        Get properties and credentials of an external engine.
      responses:
        "200":
          description: A registered engine.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ExternalEngine.yaml'
    put:
      operationId: apiExternalEnginePut
      summary: Update external engine
      tags:
        - External engine
      security:
        - OAuth2: ["engine:write"]
      description: |
        Updates the properties of an external engine.
      requestBody:
        description: A modified engine registration.
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/ExternalEngineRegistration.yaml'
      responses:
        "200":
          description: A registered engine.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/ExternalEngine.yaml'
    delete:
      operationId: apiExternalEngineDelete
      summary: Delete external engine
      tags:
        - External engine
      security:
        - OAuth2: ["engine:write"]
      description: |
        Unregisters an external engine.
      responses:
        "200":
          description: Engine successfully deleted
          content:
            application/json:
              schema:
                $ref: './schemas/Ok.yaml'

  /api/external-engine/{id}/analyse:
    servers:
      - url: https://engine.lichess.ovh
    parameters:
      - in: path
        name: id
        required: true
        description: The external engine id.
        schema:
          type: string
        example: eei_aTKImBJOnv6j
    post:
      operationId: apiExternalEngineAnalyse
      summary: Analyse with external engine
      tags:
        - External engine
      security: []
      description: |
        **Endpoint: `https://engine.lichess.ovh/api/external-engine/{id}/analyse`**

        Request analysis from an external engine.

        Response content is streamed as [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON).
        The properties are based on the [UCI specification](https://backscattering.de/chess/uci/#engine).
        Analysis stops when the client goes away, the requested limit
        is reached, or the provider goes away.
      requestBody:
        description: Engine credentials and analysis request.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientSecret:
                  type: string
                  example: ees_mdF2hK0hlKGSPeC6
                work:
                  $ref: './schemas/ExternalEngineWork.yaml'
              required:
                - clientSecret
                - work
      responses:
        "200":
          description: Stream of analysis output
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                type: object
                properties:
                  time:
                    type: integer
                    description: Number of milliseconds the search has been going on
                    example: 6880
                    minimum: 0
                  depth:
                    type: integer
                    description: Current search depth
                    example: 25
                    minimum: 0
                  nodes:
                    type: integer
                    description: Number of nodes visited so far
                    example: 7230340
                    minimum: 0
                  pvs:
                    type: array
                    description: Information about up to 5 pvs, with the primary pv at index 0.
                    items:
                      type: object
                      properties:
                        depth:
                          type: integer
                          description: Current search depth of the pv
                          example: 25
                          minimum: 0
                        cp:
                          type: integer
                          description: Evaluation in centi-pawns, from White's point of view
                          example: 40
                        mate:
                          type: integer
                          description: Evaluation in signed moves to mate, from White's point of view
                        moves:
                          type: array
                          description: Variation in UCI notation
                          items:
                            type: string
                          example: ["e2e4", "c7c6", "g1f3", "d7d5", "d2d3", "d5e4"]
                      required:
                        - depth
                        - moves
                required:
                  - time
                  - depth
                  - nodes
                  - pvs

  /api/external-engine/work:
    servers:
      - url: https://engine.lichess.ovh
    post:
      operationId: apiExternalEngineAcquire
      summary: Acquire analysis request
      tags:
        - External engine
      security: []
      description: |
        **Endpoint: `https://engine.lichess.ovh/api/external-engine/work`**

        Wait for an analysis requests to any of the external engines that
        have been registered with the given `secret`.

        Uses long polling.

        After acquiring a request, the provider should immediately
        [start streaming the results](#tag/External-engine/operation/apiExternalEngineSubmit).
      requestBody:
        description: Provider credentials.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                providerSecret:
                  type: string
                  example: Dee3uwieZei9ahpaici9bee2yahsai0K
              required:
                - secret
      responses:
        "200":
          description: Analysis has been requested
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: aingoohiJee2sius
                  work:
                    $ref: './schemas/ExternalEngineWork.yaml'
                  engine:
                    $ref: './schemas/ExternalEngine.yaml'
                required:
                  - id
                  - engine
                  - work
        "204":
          description: No pending analysis
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"

  /api/external-engine/work/{id}:
    servers:
      - url: https://engine.lichess.ovh
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          example: aingoohiJee2sius
    post:
      operationId: apiExternalEngineSubmit
      summary: Answer analysis request
      tags:
        - External engine
      security: []
      description: |
        **Endpoint: `https://engine.lichess.ovh/api/external-engine/work/{id}`**

        Submit a stream of analysis as [UCI output](https://backscattering.de/chess/uci/#engine-info).

        * The engine should always be in `UCI_Chess960` mode.
        * `UCI_AnalyseMode` enabled if available.
        * It produces `info` with at least:
          - `depth`
          - `multipv` (between 1 and 5)
          - `score`
          - `nodes`
          - `time`
          - `pv`

        The server may close the connection at any time, indicating that
        the requester has gone away and analysis should be stopped.
      requestBody:
        description: Analysis results
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: info multipv 1 depth 20 seldepth 30 time 1373 nodes 1494341 score cp 47 hashfull 594 nps 1088376 tbhits 0 pv d2d4 d7d5 c2c4 e7e6 b1c3 f8b4 c4d5 e6d5 g1f3 g8f6 c1g5 h7h6 g5f6 d8f6 d1b3 c7c5 e2e3 b8c6 d4c5 e8g8 f1d3
      responses:
        "200":
          description: Thanks
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"

  /oauth:
    get:
      operationId: oauth
      summary: Request authorization code
      tags:
        - OAuth
      security: []
      description: |
        OAuth2 authorization endpoint.

        Start the OAuth2 Authorization Code Flow with PKCE by securely
        generating two random strings unique to each authorization
        request:
        * `code_verifier`
        * `state`

        Store these in session storage. Make sure not to reveal `code_verifier`
        to eavesdroppers. Do not show it in URLs, do not abuse `state` to store
        it, do not send it over insecure connections. However it is fine if
        the user themselves can extract `code_verifier`, which will always be
        possible for fully client-side apps.

        Then send the user to this endpoint. They will be prompted to grant
        authorization and then be redirected back to the given `redirect_uri`.

        If the authorization failed, the following query string parameters will
        be appended to the redirection:
        * `error`, in particular with value `access_denied` if the user
           cancelled authorization
        * `error_description` to aid debugging
        * `state`, exactly as passed in the `state` parameter

        If the authorization succeeded, the following query string parameters
        will be appended to the redirection:
        * `code`, containing a fresh short-lived authorization code
        * `state`, exactly as passed in the `state` parameter

        Next, to defend against cross site request forgery, check that the
        returned `state` matches the `state` you originally generated.

        Finally, continue by using the authorization code to
        [obtain an access token](#operation/apiToken).
      parameters:
        - in: query
          name: response_type
          description: Must be `code`.
          required: true
          schema:
            type: string
        - in: query
          name: client_id
          description: Arbitrary identifier that uniquely identifies your application.
          example: example.com
          required: true
          schema:
            type: string
        - in: query
          name: redirect_uri
          description: The absolute URL that the user should be redirected to with the authorization result.
          required: true
          schema:
            type: string
        - in: query
          name: code_challenge_method
          description: Must be `S256`.
          required: true
          schema:
            type: string
        - in: query
          name: code_challenge
          description: Compute `BASE64URL(SHA256(code_verifier))`.
          required: true
          schema:
            type: string
        - in: query
          name: scope
          description: Space separated list of requested OAuth scopes, if any.
          schema:
            type: string
        - in: query
          name: username
          description: Hint that you want the user to log in with a specific Lichess username.
          schema:
            type: string
        - in: query
          name: state
          description: Arbitrary state that will be returned verbatim with the authorization result.
          schema:
            type: string
      responses:
        "200":
          description: Authorization prompt will be displayed to the user.

  /api/token:
    post:
      operationId: apiToken
      summary: Obtain access token
      tags:
        - OAuth
      security: []
      description: |
        OAuth2 token endpoint. Exchanges an authorization code for an access token.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: authorization_code
                  description: Must be `authorization_code`.
                code:
                  type: string
                  example: liu_iS1uOZg99Htmo58ex2jKgYziUfzsnAl0
                  description: The authorization code that was sent in the `code` parameter to your `redirect_uri`.
                code_verifier:
                  type: string
                  example: Ry1rbGdOMTQtUjhOc0lmTnFKak1LTHV0NjlRMll2aXYtTThkQnlJRkRpaGwyQjh0ZDNFdzFPSG9KUlY4M1NrRzJ5ZHhUdjVZR08zLTZOT3dCN2xLfjZOXzU2WHk4SENP
                  description: A `code_challenge` was used to request the authorization code. This must be the `code_verifier` it was derived from.
                redirect_uri:
                  type: string
                  example: http://example.com/
                  description: Must match the `redirect_uri` used to request the authorization code.
                client_id:
                  type: string
                  example: example.com
                  description: Must match the `client_id` used to request the authorization code.
      responses:
        "200":
          description: Access token successfully obtained.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              example: {"token_type": "Bearer", "access_token": "lio_pLwAbN7lFPklzY2m8lTOI1DGApS84u57", "expires_in": 31536000}
        "400":
          description: Failed to obtain access token.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/OAuthError.yaml'
    delete:
      operationId: apiTokenDelete
      summary: Revoke access token
      description: Revokes the access token sent as Bearer for this request.
      tags:
        - OAuth
      security:
        - OAuth2: []
      responses:
        "204":
          description: Access token revoked.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"

  /api/token/test:
    post:
      operationId: tokenTest
      summary: Test multiple OAuth tokens
      description: |
        For up to 1000 OAuth tokens,
        returns their associated user ID and scopes,
        or `null` if the token is invalid.

        The method is `POST` so a longer list of tokens can be sent in the request body.
      tags:
        - OAuth
      security: []
      requestBody:
        description: OAuth tokens separated by commas. Up to 1000.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "lip_AvsS88TozFeSMEaoLN5c,lip_badToken"
      responses:
        "200":
          description: The representation of the OAuth tokens.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  x-additionalPropertiesName: token
                  oneOf:
                    - type: object
                      properties:
                        userId:
                          type: string
                        scopes:
                          type: string
                          description: Comma-separated list of scopes. Empty string if the token has no scopes.
                        expires:
                          type:
                            - integer
                            - "null"
                          description: Unix-timestampe in milliseconds or null if the token never expires.
                    - type: "null"
                example: {
                  "lip_AvsS88TozFeSnZa1LN5c": {
                    "scopes": "challenge:read,challenge:write",
                    "userId": "thibault",
                    "expires": 1358509698620
                  },
                  "lip_badToken": null
                }

  /masters:
    servers:
      - url: https://explorer.lichess.ovh
    get:
      operationId: openingExplorerMaster
      summary: Masters database
      description: |
        **Endpoint: <https://explorer.lichess.ovh/masters>**

        Example: `curl https://explorer.lichess.ovh/masters?play=d2d4,d7d5,c2c4,c7c6,c4d5`
      tags:
        - Opening Explorer
      security: []
      parameters:
        - in: query
          name: fen
          description: FEN of the root position
          schema:
            type: string
          example: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        - in: query
          name: play
          description: |
            Comma separated sequence of legal moves in UCI notation.
            Play additional moves starting from `fen`.
            Required to find an opening name, if `fen` is not an exact match
            for a named position.
          schema:
            type: string
            default: ""
          example: e2e4,e7e5,c2c4,c7c6,c4e5
        - in: query
          name: since
          description: Include only games from this year or later
          schema:
            type: number
            default: 1952
        - in: query
          name: until
          description: Include only games from this year or earlier
          schema:
            type: number
        - in: query
          name: moves
          description: Number of most common moves to display
          schema:
            type: number
            default: 12
        - in: query
          name: topGames
          description: Number of top games to display
          schema:
            type: number
            default: 15
            maximum: 15
      responses:
        "200":
          description: Opening statistics and game references for the position.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/OpeningExplorerJson.yaml'

  /lichess:
    servers:
      - url: https://explorer.lichess.ovh
    get:
      operationId: openingExplorerLichess
      summary: Lichess games
      description: |
        **Endpoint: <https://explorer.lichess.ovh/lichess>**

        Games sampled from all Lichess players.

        Example: `curl https://explorer.lichess.ovh/lichess?variant=standard&speeds=blitz,rapid,classical&ratings=2200,2500&fen=rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR%20w%20KQkq%20-%200%201`
      tags:
        - Opening Explorer
      security: []
      parameters:
        - in: query
          name: variant
          description: Variant
          schema:
            $ref: './schemas/VariantKey.yaml'
            default: standard
        - in: query
          name: fen
          description: FEN or EPD of the root position
          schema:
            type: string
          example: rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2
        - in: query
          name: play
          description: |
            Comma separated sequence of legal moves in UCI notation.
            Play additional moves starting from `fen`.
            Required to find an opening name, if `fen` is not an exact match
            for a named position.
          schema:
            type: string
            default: ""
          example: e2e4,e7e5,c2c4,c7c6,c4e5
        - in: query
          name: speeds
          description: Comma separated list of game speeds to filter by
          schema:
            type: array
            items:
              $ref: './schemas/Speed.yaml'
        - in: query
          name: ratings
          description: |
            Comma separated list of ratings groups to filter by.
            Each group ranges from its value to the next higher
            group in the enum (`0` from 0 to 999, `1000` from 1000 to 1199,
            ..., `2500` from 2500 to any rating above).
          schema:
            type: array
            items:
              type: number
              enum:
                - 0
                - 1000
                - 1200
                - 1400
                - 1600
                - 1800
                - 2000
                - 2200
                - 2500
        - in: query
          name: since
          description: Include only games from this month or later
          schema:
            type: string
            default: 1952-01
        - in: query
          name: until
          description: Include only games from this month or earlier
          schema:
            type: string
            default: 3000-12
        - in: query
          name: moves
          description: Number of most common moves to display
          schema:
            type: number
            default: 12
        - in: query
          name: topGames
          description: Number of top games to display
          schema:
            type: number
            default: 4
            maximum: 4
        - in: query
          name: recentGames
          description: Number of recent games to display
          schema:
            type: number
            default: 4
            maximum: 4 # or 8, depending on query
        - in: query
          name: history
          description: Optionally retrieve history
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Opening statistics and game references for the position.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/OpeningExplorerJson.yaml'

  /player:
    servers:
      - url: https://explorer.lichess.ovh
    get:
      operationId: openingExplorerPlayer
      summary: Player games
      description: |
        **Endpoint: <https://explorer.lichess.ovh/player>**

        Games of a Lichess player.

        Responds with a stream of [newline delimited JSON](#section/Introduction/Streaming-with-ND-JSON). Will start indexing
        on demand, immediately respond with the current results, and stream
        more updates until indexing is complete. The stream is throttled
        and deduplicated. Empty lines may be sent to avoid timeouts.

        Will index new games at most once per minute, and revisit previously
        ongoing games at most once every day.

        Example: `curl https://explorer.lichess.ovh/player?player=revoof&color=white&play=d2d4,d7d5&recentGames=1`
      tags:
        - Opening Explorer
      security: []
      parameters:
        - in: query
          name: player
          description: Username or ID of the player
          schema:
            type: string
          example: revoof
        - in: query
          name: variant
          description: Variant
          schema:
            $ref: './schemas/VariantKey.yaml'
            default: standard
        - in: query
          name: fen
          description: FEN of the root position
          schema:
            type: string
          example: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
        - in: query
          name: play
          description: |
            Comma separated sequence of legal moves in UCI notation.
            Play additional moves starting from `fen`.
            Required to find an opening name, if `fen` is not an exact match
            for a named position.
          schema:
            type: string
            default: ""
          example: d2d4,d7d5
        - in: query
          name: speeds
          description: Comma separated list of game speeds to look for
          schema:
            type: array
            items:
              $ref: './schemas/Speed.yaml'
        - in: query
          name: modes
          description: Comma separated list of modes
          schema:
            type: array
            items:
              type: string
              enum:
                - casual
                - rated
        - in: query
          name: since
          description: Include only games from this month or later
          schema:
            type: string
            default: 1952-01
        - in: query
          name: until
          description: Include only games from this month or earlier
          schema:
            type: string
            default: 3000-12
        - in: query
          name: moves
          description: Number of most common moves to display
          schema:
            type: number
        - in: query
          name: recentGames
          description: Number of recent games to display
          schema:
            type: number
            default: 8
            maximum: 8
      responses:
        "200":
          description: Opening statistics and game references for the position.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/nd-json:
              schema:
                $ref: './schemas/OpeningExplorerPlayerJson.yaml'

  /master/pgn/{gameId}:
    servers:
      - url: https://explorer.lichess.ovh
    get:
      operationId: openingExplorerMasterGame
      summary: OTB master game
      description: |
        **Endpoint: `https://explorer.lichess.ovh/masters/pgn/{gameId}`**

        Example: `curl https://explorer.lichess.ovh/masters/pgn/aAbqI4ey`
      tags:
        - Opening Explorer
      security: []
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The PGN representation of the game.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-chess-pgn:
              schema:
                $ref: './schemas/MasterGamePgn.yaml'

  /standard:
    servers:
      - url: https://tablebase.lichess.ovh
    get:
      operationId: tablebaseStandard
      summary: Tablebase lookup
      description: |
        **Endpoint: <https://tablebase.lichess.ovh>**

        Example: `curl http://tablebase.lichess.ovh/standard?fen=4k3/6KP/8/8/8/8/7p/8_w_-_-_0_1`
      tags:
        - Tablebase
      security: []
      parameters:
        - in: query
          name: fen
          description: FEN of the position. Underscores allowed.
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The tablebase information for the position in standard chess.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: './schemas/TablebaseJson.yaml'
  /atomic:
    servers:
      - url: https://tablebase.lichess.ovh
    get:
      operationId: tablebaseAtomic
      summary: Tablebase lookup for Atomic chess
      description: |
        **Endpoint: <https://tablebase.lichess.ovh>**
      tags:
        - Tablebase
      security: []
      responses:
        "200":
          description: The tablebase information for the position in atomic chess.
          content:
            text/plain:
              schema:
                type: string
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"

  /antichess:
    servers:
      - url: https://tablebase.lichess.ovh
    get:
      operationId: antichessAtomic
      summary: Tablebase lookup for Antichess
      description: |
        **Endpoint: <https://tablebase.lichess.ovh>**
      tags:
        - Tablebase
      security: []
      responses:
        "200":
          description: The tablebase information for the position in atomic chess.
          content:
            text/plain:
              schema:
                type: string
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"


components:
  schemas:
    $ref: './schemas/_index.yaml'
  securitySchemes:
    OAuth2:
      type: oauth2
      description: |
        Read [the introduction for how to make authenticated requests](#section/Introduction/Authentication).
      flows:
        authorizationCode:
          authorizationUrl: https://lichess.org/oauth
          tokenUrl: https://lichess.org/api/token
          scopes:
            "preference:read": Read your preferences
            "preference:write": Write your preferences
            "email:read": Read your email address
            "engine:read": Read your external engines
            "engine:write": Create, update, delete your external engines
            "challenge:read": Read incoming challenges
            "challenge:write": Create, accept, decline challenges
            "challenge:bulk": Create, delete, query bulk pairings
            "study:read": Read private studies and broadcasts
            "study:write": Create, update, delete studies and broadcasts
            "tournament:write": Create tournaments
            "racer:write": Create and join puzzle races
            "puzzle:read": Read puzzle activity
            "team:read": Read private team information
            "team:write": Join, leave teams
            "team:lead": Manage teams (kick members, send PMs)
            "follow:read": Read followed players
            "follow:write": Follow and unfollow other players
            "msg:write": Send private messages to other players
            "board:play": Play with the Board API
            "bot:play": Play with the Bot API. Only for [Bot accounts](#operation/botAccountUpgrade)
            "web:mod": Use moderator tools (within the bounds of your permissions)

  examples:
    challenge:
      value: {
        "type":"challenge",
        "challenge": {
          "id":"7pGLxJ4F",
          "url": "https://lichess.org/VU0nyvsW",
          "status":"created",
          "compat": {
            "bot": false,
            "board": true
          },
          "challenger": {
            "id":"lovlas",
            "name":"Lovlas",
            "title":"IM",
            "rating": 2506,
            "patron": true,
            "online": true,
            "lag": 24
          },
          "destUser": {
            "id":"thibot",
            "name":"thibot",
            "rating": 1500,
            "provisional": true,
            "online": true,
            "lag": 45
          },
          "variant": {
            "key":"standard",
            "name":"Standard",
            "short":"Std"
          },
          "rated": true,
          "timeControl": {
            "type":"clock",
            "limit": 300,
            "increment": 25,
            "show":"5+25"
          },
          "color":"random",
          "finalColor": "white",
          "speed":"rapid",
          "perf": {
            "icon":"#",
            "name":"Rapid"
          }
        }
      }

    challengeCanceled:
      value: {
        "type":"challengeCanceled",
        "challenge": {
          "id":"7pGLxJ4F",
          "url": "https://lichess.org/VU0nyvsW",
          "status": "canceled",
          "compat": {
            "bot": false,
            "board": true
          },
          "challenger": {
            "id":"lovlas",
            "name":"Lovlas",
            "title":"IM",
            "rating": 2506,
            "patron": true,
            "online": true,
            "lag": 24
          },
          "destUser": {
            "id":"thibot",
            "name":"thibot",
            "rating": 1500,
            "provisional": true,
            "online": true,
            "lag": 45
          },
          "variant": {
            "key":"standard",
            "name":"Standard",
            "short":"Std"
          },
          "rated": true,
          "timeControl": {
            "type":"clock",
            "limit": 300,
            "increment": 25,
            "show":"5+25"
          },
          "color":"random",
          "finalColor": "black",
          "speed":"rapid",
          "perf": {
            "icon":"#",
            "name":"Rapid"
          }
        }
      }

    challengeDeclined:
      value: {
        "type": "challengeDeclined",
        "challenge": {
          "id":"7pGLxJ4F",
          "url": "https://lichess.org/VU0nyvsW",
          "status": "declined",
          "compat": {
            "bot": false,
            "board": true
          },
          "challenger": {
            "id":"lovlas",
            "name":"Lovlas",
            "title":"IM",
            "rating": 2506,
            "patron": true,
            "online": true,
            "lag": 24
          },
          "destUser": {
            "id":"thibot",
            "name":"thibot",
            "title":null,
            "rating": 1500,
            "provisional": true,
            "online": true,
            "lag": 45
          },
          "variant": {
            "key":"standard",
            "name":"Standard",
            "short":"Std"
          },
          "rated": true,
          "timeControl": {
            "type":"clock",
            "limit": 300,
            "increment": 25,
            "show":"5+25"
          },
          "color":"random",
          "finalColor": "white",
          "speed":"rapid",
          "perf": {
            "icon":"#",
            "name":"Rapid"
          },
          "declineReason": "I'm not accepting challenges at the moment.",
          "declineReasonKey": "generic"
        }
      }

    gameStart:
      value: {
        "type":"gameStart",
        "game": {
          "gameId": "rCRw1AuO",
          "fullId": "rCRw1AuOvonq",
          "color": "black",
          "fen": "r1bqkbnr/pppp2pp/2n1pp2/8/8/3PP3/PPPB1PPP/RN1QKBNR w KQkq - 2 4",
          "hasMoved": true,
          "isMyTurn": false,
          "lastMove": "b8c6",
          "opponent": { "id": "philippe", "rating": 1790, "username": "Philippe" },
          "perf": "correspondence",
          "rated": true,
          "secondsLeft": 1209600,
          "source": "friend",
          "status": { "id": 20, "name": "started" },
          "speed": "correspondence",
          "variant": { "key": "standard", "name": "Standard" },
          "compat": {
            "bot": false,
            "board": true
          },
          "id": "rCRw1AuO"
        }
      }

    gameFinish:
      value: {
        "type":"gameFinish",
        "game": {
          "gameId": "rCRw1AuO",
          "fullId": "rCRw1AuOvonq",
          "color": "black",
          "fen": "r1bqkbnr/pppp2pp/2n1pp2/8/8/3PP3/PPPB1PPP/RN1QKBNR w KQkq - 2 4",
          "hasMoved": true,
          "isMyTurn": false,
          "lastMove": "b8c6",
          "opponent": { "id": "philippe", "username": "Philippe", "rating": 1790, "ratingDiff": -12 },
          "perf": "correspondence",
          "rated": true,
          "secondsLeft": 1209600,
          "source": "friend",
          "status": { "id": 31, "name": "resign" },
          "speed": "correspondence",
          "variant": { "key": "standard", "name": "Standard" },
          "compat": {
            "bot": false,
            "board": true
          },
          "winner": "black",
          "ratingDiff": 8,
          "id": "rCRw1AuO"
        }
      }

    gameFull:
      value: {
        "type": "gameFull",
        "id": "5IrD6Gzz",
        "rated": true,
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "clock": {
          "initial": 1200000,
          "increment": 10000
        },
        "speed": "classical",
        "perf": {
          "name": "Classical"
        },
        "createdAt": 1523825103562,
        "white": {
          "id": "lovlas",
          "name": "lovlas",
          "provisional": false,
          "rating": 2500,
          "title": "IM"
        },
        "black": {
          "id": "leela",
          "name": "leela",
          "rating": 2390,
        },
        "initialFen": "startpos",
        "state": {
          "type": "gameState",
          "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7",
          "wtime": 7598040,
          "btime": 8395220,
          "winc": 10000,
          "binc": 10000,
          "status": "started"
        }
      }

    gameState:
      value: {
        "type": "gameState",
        "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3",
        "wtime": 7598040,
        "btime": 8395220,
        "winc": 10000,
        "binc": 10000,
        "status": "started"
      }

    chatLine:
      value: {
        "type": "chatLine",
        "username": "thibault",
        "text": "Good luck, have fun",
        "room": "player"
      }

    chatLineSpectator:
      value: {
        "type": "chatLine",
        "username": "lovlas",
        "text": "!eval",
        "room": "spectator"
      }

    opponentGoneTrue:
      value: {
        "type": "opponentGone",
        "gone": true,
        "claimWinInSeconds": 8
      }

    opponentGoneFalse:
      value: {
        "type": "opponentGone",
        "gone": false
      }

    gameStateResign:
      value: {
        "type": "gameState",
        "moves": "e2e4 c7c5 f2f4 d7d6 g1f3 b8c6 f1c4 g8f6 d2d3 g7g6 e1g1 f8g7 b1c3",
        "wtime": 7598040,
        "btime": 8395220,
        "winc": 10000,
        "binc": 10000,
        "status": "resign",
        "winner": "black"
      }
