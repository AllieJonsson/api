openapi: "3.0.0"
info:
  version: 2.0.0
  title: Lichess.org API reference
  x-logo:
    url: https://lichess1.org/assets/favicon.192.png
    backgroundColor: #ffffff
  description: "\n\n# Introduction\nWelcome to the reference for the Lichess API!\n\n\
  \ - Get help in the [lichess developers discord channel](https://discord.gg/pw6Efvk),\
  \ or in the #lichess IRC channel on freenode.\n\
  \ - [Contribute to this documentation on Github](https://github.com/lichess-org/api).\n\
  \ - Check out [lichess widgets to embed in your website](https://lichess.org/developers).\n\
  \ - [Download all lichess rated games](https://database.lichess.org/)\n\
  \n## Endpoint\n\
  \ `https://lichess.org`\n\
  \ ## Rate limiting\n\
  \ All requests are rate limited using various strategies,\
  \ to ensure the API remains responsive for everyone.\n\
  \ Only make one request at a time.\n\
  \ If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429),\
  \ please wait a full minute before resuming API usage."
  contact:
    url: https://lichess.org
servers:
  - url: https://lichess.org
tags:
- name: Users
  description: Access registered users on Lichess.
- name: Games
  description: Access games played on Lichess.
- name: Teams
  description: Access Lichess teams and their members.
- name: Preferences
  description: Access your preferences.
- name: JSONP
  description: |
    Requests available as `JSONP`.
    ```javascript
    $.ajax({
      url:'https://lichess.org/api/users/status',
      data: { ids: 'aliquantus,chess-network' },
      dataType:'jsonp',
      jsonp:'callback',
      success: function(data) {
        console.debug(JSON.stringify(data.list));
      }
    });
    ```
- name: OAuth
  description: |
    Requests taking advantage of OAuth authentication.
paths:
  /api/users/status:
    get:
      operationId: apiUsersStatus
      summary: Real-time users status
      description: |
        Read the `online`, `playing` and `streaming` flags of several users.
        `JSONP` is available.

        This API is very fast and cheap on lichess side.
        So you can call it quite often (like once every 5 seconds).

        Use it to track players and know when they're connected on lichess and playing games.
      tags:
      - Users
      - JSONP
      parameters:
        - in: query
          name: ids
          required: true
          description: User IDs separated by commas
          schema:
            type: string
          example: aliquantus,chess-network
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    online:
                      type: boolean
                      nullable: true
                    playing:
                      type: boolean
                      nullable: true
                    streaming:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "chess-network",
                    "name": "Chess-Network",
                    "title": "NM",
                    "online": true,
                    "playing": true,
                    "streaming": true,
                    "patron": true
                  }
                ]

  /api/user/{username}:
    get:
      operationId: apiUser
      summary: Get user public data
      description: |
        Read public data of a user.
        `JSONP` is available.
      tags:
      - Users
      - JSONP
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/user/{username}/activity:
    get:
      operationId: apiUserActivity
      summary: Get user activity
      description: |
        Read data to generate the activity feed of a user.
        `JSONP` is available.
      tags:
      - Users
      - JSONP
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              example:
                https://gist.github.com/ornicar/0ee2d2427cb74ed1a35e86f5ba09fabc

  /api/users:
    post:
      operationId: apiUsers
      summary: Get users by ID
      tags:
      - Users
      description: |
        Get several users by their IDs. Users are returned in the order same order as the IDs.
        
        The method is `POST` so a longer list of IDs can be sent in the request body.
      requestBody:
        description: User IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "aliquantus,chess-network,lovlas"
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /account/me:
    get:
      operationId: accountMe
      summary: Get my profile
      security:
        - OAuth2: []
      description: |
        Public informations about the logged in user.
      tags:
      - Users
      - OAuth
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /account/preferences:
    get:
      operationId: accountPreferences
      summary: Get my preferences
      tags:
      - Preferences
      - OAuth
      security:
        - OAuth2: ["preference:read"]
      description: |
        Read the preferences of the logged in user.

        - https://lichess.org/account/preferences
        - https://github.com/ornicar/lila/blob/master/modules/pref/src/main/Pref.scala
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
  /account/kid:
    get:
      operationId: accountKid
      summary: Get my kid mode status
      tags:
      - Preferences
      - OAuth
      security:
        - OAuth2: ["preference:read"]
      description: |
        Read the kid mode status of the logged in user.

        - https://lichess.org/account/kid
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  kid:
                    type: boolean
                example:
                  kid: false
    post:
      operationId: accountKidPost
      summary: Set my kid mode status
      tags:
      - Preferences
      - OAuth
      security:
        - OAuth2: ["preference:write"]
      description: |
        Set the kid mode status of the logged in user.

        - https://lichess.org/account/kid
      parameters:
        - in: query
          name: v
          required: true
          description: Kid mode status
          schema:
            type: boolean
          example: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /game/export/{gameId}.pgn:
    get:
      operationId: gamePng
      summary: Export one game
      description: |
        Download one game in PGN format. Only finished games can be downloaded.
      tags:
      - Games
      parameters:
        - in: path
          name: gameId
          description: The game ID.
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/x-chess-pgn:
              example: |
                [Event "Rated Blitz game"]
                [Site "https://lichess.org/fY44h4OY"]
                [Date "2018.03.29"]
                [Round "-"]
                [White "pveldman"]
                [Black "thibault"]
                [Result "1-0"]
                [UTCDate "2018.03.29"]
                [UTCTime "01:38:15"]
                [WhiteElo "1610"]
                [BlackElo "1601"]
                [WhiteRatingDiff "+10"]
                [BlackRatingDiff "-10"]
                [Variant "Standard"]
                [TimeControl "180+0"]
                [ECO "C62"]
                [Opening "Ruy Lopez: Steinitz Defense"]
                [Termination "Normal"]
                [Event "U1700 SuperBlitz Arena"]

                1. e4 { [%clk 0:03:00] } e5 { [%clk 0:03:00] } 2. Nf3 { [%clk 0:02:59] } Nc6 { [%clk 0:02:58] } 3. Bb5 { [%clk 0:02:57] } d6 { [%clk 0:02:55] } 4. h3 { [%clk 0:02:54] } Nf6 { [%clk 0:02:52] } 5. Bxc6+ { [%clk 0:02:52] } bxc6 { [%clk 0:02:49] } 6. d3 { [%clk 0:02:51] } Be7 { [%clk 0:02:46] } 7. O-O { [%clk 0:02:47] } O-O { [%clk 0:02:45] } 8. b3 { [%clk 0:02:45] } d5 { [%clk 0:02:45] } 9. exd5 { [%clk 0:02:33] } cxd5 { [%clk 0:02:40] } 10. Nxe5 { [%clk 0:02:31] } Qd6 { [%clk 0:02:38] } 1-0

  /games/export/{username}:
    get:
      operationId: gamesExportUsername
      summary: Export games of a user
      tags:
      - Games
      - OAuth
      description: |
        Download all games of any user in PGN format. Optionally specify a start and end timestamps for partial exports.

        Games are sorted by reverse chronological order (most recent first)

        We recommend streaming the response, for it can be very long.
        https://lichess.org/@/german11 for instance has more than 250,000 games.

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 10 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 20 games per second
          - Authenticated, downloading your own games: 50 games per second
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
        - in: query
          name: since
          description: Download games played since this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Account creation date
        - in: query
          name: until
          description: Download games played until this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Now
        - in: query
          name: max
          description: How many games to download. Leave empty to download all games.
          schema:
            type: integer
            minimum: 1
            default: Infinite
        - in: query
          name: moves
          description: Include the PGN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PGN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PGN moves.

            Example: `2. exd5 { [%clk 1:01:27] } e5 { [%clk 1:01:28] }`
          schema:
            type: boolean
            default: false
      responses:
        200:
          content:
            application/x-chess-pgn:
              example: |
                [Event "Rated Blitz game"]
                [Site "https://lichess.org/fY44h4OY"]
                [Date "2018.03.29"]
                [Round "-"]
                [White "pveldman"]
                [Black "thibault"]
                [Result "1-0"]
                [UTCDate "2018.03.29"]
                [UTCTime "01:38:15"]
                [WhiteElo "1610"]
                [BlackElo "1601"]
                [WhiteRatingDiff "+10"]
                [BlackRatingDiff "-10"]
                [Variant "Standard"]
                [TimeControl "180+0"]
                [ECO "C62"]
                [Opening "Ruy Lopez: Steinitz Defense"]
                [Termination "Normal"]
                [Event "U1700 SuperBlitz Arena"]

                1. e4 { [%clk 0:03:00] } e5 { [%clk 0:03:00] } 2. Nf3 { [%clk 0:02:59] } Nc6 { [%clk 0:02:58] } 3. Bb5 { [%clk 0:02:57] } d6 { [%clk 0:02:55] } 4. h3 { [%clk 0:02:54] } Nf6 { [%clk 0:02:52] } 5. Bxc6+ { [%clk 0:02:52] } bxc6 { [%clk 0:02:49] } 6. d3 { [%clk 0:02:51] } Be7 { [%clk 0:02:46] } 7. O-O { [%clk 0:02:47] } O-O { [%clk 0:02:45] } 8. b3 { [%clk 0:02:45] } d5 { [%clk 0:02:45] } 9. exd5 { [%clk 0:02:33] } cxd5 { [%clk 0:02:40] } 10. Nxe5 { [%clk 0:02:31] } Qd6 { [%clk 0:02:38] } 1-0


                [Event "Rated Blitz game"]
                [Site "https://lichess.org/zoYu3nlQ"]
                [Date "2018.03.29"]
                [Round "-"]
                [White "thibault"]
                [Black "pveldman"]
                [Result "0-1"]
                [UTCDate "2018.03.29"]
                [UTCTime "01:33:15"]
                [WhiteElo "1611"]
                [BlackElo "1599"]
                [WhiteRatingDiff "-10"]
                [BlackRatingDiff "+11"]
                [Variant "Standard"]
                [TimeControl "180+0"]
                [ECO "C37"]
                [Opening "King's Gambit Accepted, King's Knight Gambit"]
                [Termination "Normal"]

                1. e4 { [%clk 0:03:00] } e5 { [%clk 0:03:00] } 2. f4 { [%clk 0:03:00] } exf4 { [%clk 0:02:58] } 3. Nf3 { [%clk 0:02:57] } g5 { [%clk 0:02:56] } 4. Bc4 { [%clk 0:02:57] } d6 { [%clk 0:02:53] } 5. O-O { [%clk 0:02:53] } 0-1

  /api/tournament:
    get:
      operationId: apiTournament
      summary: Get current tournaments
      tags:
      - Tournaments
      description: |
        Get recently finished, ongoing, and upcoming tournaments.

        This API is used to display the [Lichess tournament schedule](https://lichess.org/tournament).
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
  /team/{teamId}/users:
    get:
      operationId: teamIdUsers
      summary: Get members of a team
      tags:
      - Users
      - Teams
      description: |
        Members are sorted by reverse chronological order of joining the team (most recent first).

        **Members are streamed as [ndjson](http://ndjson.org/)**, i.e. one JSON object per line.
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
        - in: query
          name: max
          description: How many members to get. Leave empty to get all members of the team.
          schema:
            type: integer
            minimum: 1
            default: Infinite
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

components:
  schemas:
    User:
      example: {
        "id": "georges",
        "username": "Georges",
        "title": "NM",
        "online": true,
        "playing": true,
        "streaming": false,
        "createdAt": 1290415680000,
        "seenAt": 1522636452014,
        "profile": {
            "bio": "Free bugs!",
            "country": "EC",
            "firstName": "Thibault",
            "lastName": "Duplessis",
            "links": "github.com/ornicar\r\ntwitter.com/ornicar",
            "location": "On the road"
        },
        "language": "en-GB",
        "perfs": {
            "blitz": {
                "games": 2945,
                "prog": -22,
                "rating": 1609,
                "rd": 60
            },
            "bullet": {
                "games": 2324,
                "prog": -9,
                "rating": 1602,
                "rd": 61
            },
            "chess960": {
                "games": 347,
                "prog": 84,
                "rating": 1554,
                "rd": 66
            },
            "puzzle": {
                "games": 2248,
                "prog": -67,
                "rating": 1737,
                "rd": 63
            },
        },
        "patron": true,
        "disabled" : false,
        "engine" : false,
        "booster" : false,
        "playTime": {
            "total": 3296897,
            "tv": 12134
        }
      }

    UserExtended:
      example: {
        "id": "georges",
        "username": "Georges",
        "title": "NM",
        "online": true,
        "playing": true,
        "streaming": false,
        "createdAt": 1290415680000,
        "seenAt": 1522636452014,
        "profile": {
            "bio": "Free bugs!",
            "country": "EC",
            "firstName": "Thibault",
            "lastName": "Duplessis",
            "links": "github.com/ornicar\r\ntwitter.com/ornicar",
            "location": "On the road"
        },
        "nbFollowers": 2735,
        "nbFollowing": 299,
        "completionRate": 97,
        "language": "en-GB",
        "count": {
            "ai": 531,
            "all": 9265,
            "bookmark": 71,
            "draw": 340,
            "drawH": 331,
            "import": 66,
            "loss": 4480,
            "lossH": 4207,
            "me": 0,
            "playing": 6,
            "rated": 7157,
            "win": 4440,
            "winH": 4378
        },
        "perfs": {
            "blitz": {
                "games": 2945,
                "prog": -22,
                "rating": 1609,
                "rd": 60
            },
            "bullet": {
                "games": 2324,
                "prog": -9,
                "rating": 1602,
                "rd": 61
            },
            "chess960": {
                "games": 347,
                "prog": 84,
                "rating": 1554,
                "rd": 66
            },
            "puzzle": {
                "games": 2248,
                "prog": -67,
                "rating": 1737,
                "rd": 63
            },
        },
        "patron": true,
        "disabled" : false,
        "engine" : false,
        "booster" : false,
        "playTime": {
            "total": 3296897,
            "tv": 12134
        }
      }

    UserPreferences:
      example: {
        "prefs":{
          "dark":true,
          "transp":false,
          "bgImg":"http://media.blizzard.com/sc2/media/wallpapers/wall080/wall080-1920x1080.jpg",
          "is3d":false,
          "theme":"wood2",
          "pieceSet":"go",
          "theme3d":"Light-Wood",
          "pieceSet3d":"Staunton",
          "soundSet":"silent",
          "blindfold":0,
          "autoQueen":2,
          "autoThreefold":2,
          "takeback":3,
          "clockTenths":1,
          "clockBar":true,
          "clockSound":true,
          "premove":true,
          "animation":2,
          "captured":true,
          "follow":true,
          "highlight":true,
          "destination":true,
          "coords":2,
          "replay":2,
          "challenge":3,
          "message":3,
          "coordColor":1,
          "submitMove":0,
          "confirmResign":1,
          "insightShare":2,
          "keyboardMove":0,
          "zen":0,
          "moveEvent":2
        }
    }

    Tournament:
      example: {
        "id": "QITRjufu",
        "fullName": "U1700 SuperBlitz Arena",
        "clock": {
            "increment": 0,
            "limit": 180
        },
        "minutes": 57,
        "rated": true,
        "createdBy": "lichess",
        "system": "arena",
        "secondsToStart": 0,
        "startsAt": 1522803600000,
        "finishesAt": 1522807020000,
        "hasMaxRating": true,
        "nbPlayers": 154,
        "status": 30,
        "perf": {
            "icon": ")",
            "key": "blitz",
            "name": "Blitz",
            "position": 1
        },
        "schedule": {
            "freq": "hourly",
            "speed": "superblitz"
        },
        "variant": {
            "key": "standard",
            "name": "Standard",
            "short": "Std"
        },
        "winner": {
            "id": "camerun10",
            "name": "camerun10",
            "title": null
        }
      }

    Ok:
      properties:
        ok:
          type: boolean
      example:
        ok: true

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    OAuth2:
      type: oauth2
      description: "### Authorization Code Flow\n\
        \ The authorization code flow allows your users to **login with lichess**.\n\
        \ - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-authorization-code)\n\
        \ - [Create a Lichess OAuth app](https://lichess.org/account/oauth/app)\n\
        \ - [About authorization code flow]( [More info](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2)\n\
        \n### Personal API Token\n\
        \ Personal API tokens allow you to quickly interact with Lichess OAuth API.\n\
        \ - `curl https://lichess.org/account/me -H \"Authorization: Bearer <token>\"`\n\
        \ - [NodeJS example](https://github.com/lichess-org/api/tree/master/example/oauth-personal-token)\n\
        \ - [Generate a personal API token](https://lichess.org/account/oauth/token)"
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.lichess.org/oauth/authorize
          tokenUrl: https://oauth.lichess.org/oauth
          scopes:
            "game:read": Download all your games
            "preference:read": Read your preferences
            "preference:write": Write your preferences
